d/agcov(x)
(d/agcov(x))^1.5
n = 100
x <- c(1:n)*0+1/n
agg.cover <- function(cover,max.overlap){
geometriccover <- 1-exp(sum(log(1-cover)))
linearcover <- sum(cover*(1-max.overlap))
total.cover = geometriccover*(1-linearcover)+linearcover
return(total.cover)
}
n = 100
x <- c(1:n)*0+1/n
y=agg.cover(x)
y
max.overlap=1
n = 100
x <- c(1:n)*0+1/n
y=agg.cover(x)
y
y=agg.cover(x,max.overlap)
y
n = 50
x <- c(1:n)*0+1/n
y=agg.cover(x,max.overlap)
y
p = 0.1
n = 50
x <- c(1:n)*0+p
y=agg.cover(x,max.overlap)
y
max.overlap=1
crown.width=30
treesperha = 100
coverpertree = (crown.width/2)^2*3.141892/10000
(crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
max.overlap=1
crown.width=30
treesperha = 100
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=30
treesperha = 50
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=10
treesperha = 50
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
f10 = 7
fba = 10*f10
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
diam = 35
m2pertree = 3.141592*(diam/200)^2
treesperha = mba/m2pertree
cover = 0.8
coverpertree = 1-(1-cover)^0.5
coverpertree
areapertree = coverpertree*10000/treesperha
crown.width = (areapertree/3.141592)^0.5*2
crown.width
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=10
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
treesperha
crown.width=15
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=12
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=11
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=11.2
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
crown.width=11.1
coverpertreeperha = (crown.width/2)^2*3.141892/10000
coverperha = 1-(1-coverpertreeperha)^treesperha
coverperha
f10 = 7
fba = 10*f10
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
diam = 35
m2pertree = 3.141592*(diam/200)^2
treesperha = mba/m2pertree
cover = 0.8
coverpertree = 1-(1-cover)^0.5
coverpertree
areapertree = coverpertree*10000/treesperha
crown.width = (areapertree/3.141592)^0.5*2
crown.width
coverpertreeperha
coverperha
treesperha
coverperha
treesperha
coverpertreeperha = 1-(1-coverperha)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
coverperha = 0.8
treesperha
coverpertreeperha = 1-(1-coverperha)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
cover = 0.8
treesperha
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/diam*100
crown.stem.ratio
get.crown.diam.ratio <- function(cover, dbh, ba, baf){
#cover = aggregate overstory cover
#diam = stand quadratic mean diameter
#ba = stand basal area count
#baf = basal area factor
if(is.na(baf)){baf=10}
if(baf %in% c(5,10,20,40)){#legacy basal area units
fba = baf*ba
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
}
if(is.na(baf)|baf==2){#metric basal area units
mba = ba*baf
}
m2pertree = 3.141592*(dbh/200)^2
treesperha = mba/m2pertree
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/dbh*100
return(crown.stem.ratio)
}
get.crown.diam.ratio <- function(cover, dbh, ba, baf){
#cover = aggregate overstory cover
#diam = stand quadratic mean diameter
#ba = stand basal area count
#baf = basal area factor
if(is.na(baf)){baf=10}
if(baf %in% c(5,10,20,40)){#legacy basal area units
fba = baf*ba
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
}
if(is.na(baf)|baf==2){#metric basal area units
mba = ba*baf
}
m2pertree = 3.141592*(dbh/200)^2
treesperha = mba/m2pertree
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/dbh*100
return(crown.stem.ratio)#crown stem ratio meter per meter
}
get.crown.diam.ratio(0.8,15,5)
get.crown.diam.ratio(0.8,15,5,10)
get.crown.diam.ratio(cover=0.8,dba=15,ba=5,baf=10)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=10)
get.crown.diam.ratio(baf=10,dbh=15,ba=5,cover=0.8)
get.crown.diam.ratio <- function(cover, dbh, ba, baf){
#cover = aggregate overstory cover
#diam = stand quadratic mean diameter
#ba = stand basal area count
#baf = basal area factor
if(is.null(baf)){baf=10}
if(baf %in% c(5,10,20,40)){#legacy basal area units
fba = baf*ba
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
}
if(is.na(baf)|baf==2){#metric basal area units
mba = ba*baf
}
m2pertree = 3.141592*(dbh/200)^2
treesperha = mba/m2pertree
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/dbh*100
return(crown.stem.ratio)#crown stem ratio meter per meter
}
get.crown.diam.ratio <- function(cover, dbh, ba, baf){
#cover = aggregate overstory cover
#diam = stand quadratic mean diameter
#ba = stand basal area count
#baf = basal area factor
if(is.null(baf)){baf=10}
if(baf %in% c(5,10,20,40)){#legacy basal area units
fba = baf*ba
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
}
if(is.na(baf)|baf==2){#metric basal area units
mba = ba*baf
}
m2pertree = 3.141592*(dbh/200)^2
treesperha = mba/m2pertree
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/dbh*100
return(crown.stem.ratio)#crown stem ratio meter per meter
}
get.crown.diam.ratio(0.8,15,5)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5)
get.crown.diam.ratio <- function(cover, dbh, ba, baf=10){
#cover = aggregate overstory cover
#diam = stand quadratic mean diameter
#ba = stand basal area count
#baf = basal area factor
if(baf %in% c(5,10,20,40)){#legacy basal area units
fba = baf*ba
actoha = 43560*0.3048^2/10000
ft2tom2 = 0.3048^2
mba = fba*ft2tom2/actoha
}
if(is.na(baf)|baf==2){#metric basal area units
mba = ba*baf
}
m2pertree = 3.141592*(dbh/200)^2
treesperha = mba/m2pertree
coverpertreeperha = 1-(1-cover)^(1/treesperha)
crown.width = 2*(coverpertreeperha*10000/3.141592)^0.5
crown.width
crown.stem.ratio = crown.width/dbh*100
return(crown.stem.ratio)#crown stem ratio meter per meter
}
get.crown.diam.ratio(0.8,15,5,10)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=10)
get.crown.diam.ratio(0.8,15,5)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=50)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=5)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=40)
get.crown.diam.ratio(cover=0.8,dbh=15,ba=5,baf=41)
library("terra")
library("raster")
#terra version 1.2.13
fnz <- "nz_elev.rda"
if (!file.exists(fnz)) {
download.file("https://github.com/Nowosad/spDataLarge/raw/master/data/nz_elev.rda", fnz, mode = "wb")
}
load("nz_elev.rda")
nz <- rast(nz_elev)
plot(nz)
library("terra")
library("raster")
#terra version 1.2.13
fnz <- "nz_elev.rda"
if (!file.exists(fnz)) {
download.file("https://github.com/Nowosad/spDataLarge/raw/master/data/nz_elev.rda", fnz, mode = "wb")
}
load("nz_elev.rda")
nz <- rast(nz_elev)
plot(nz)
c
c=1
b=2
a=b
b=c
c
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages("remotes")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
remotes::install_github("rspatial/raster")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages("Rcpp")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
remotes::install_github("rspatial/raster")
install.packages(c("igraph", "insight"))
install.packages(c("cli", "igraph", "rgl", "rlang"))
library(soilDB)
library(aqp)#load before dplyr
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(dynamicTreeCut)
library(rpart)
library(rpart.plot)
library(goeveg)
library(proxy)
library(foreign)
library(optpart)
library(dendsort)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load clustering functions ----
source('clusterfunctions.R')
# Load Veg tables ----
source('processplot.R')
View(listspp)
View(Com.Sp.mean)
View(overstorycover)
View(Com.Sp.mean)
simplecover <- Com.Sp.mean %>% group_by(soilplot, Simple) %>% summarise(cover = 100*(1-10^(sum(Total))))
View(simplecover)
simplecover <- Com.Sp.mean %>% group_by(soilplot, Simple) %>% summarise(cover = 100*(1-10^(sum(log10(1-(Total/100.001))))))
View(listspp)
exotics <- subset(listspp, !Eastern.North.America %in% "N")
View(exotics)
exotics <- c(subset(listspp, !Eastern.North.America %in% "N")$AcTaxon, 'Phalaris arundinacea')
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
View(exoticover)
subset(listspp, !Eastern.North.America %in% "N")$AcTaxon
exotics <- c(subset(listspp, Eastern.North.America %in% "X")$AcTaxon, 'Phalaris arundinacea')
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
exotics <- c(subset(listspp, Eastern.North.America %in% "X")$AcTaxon, subset(listspp, Eastern.North.America %in% "X")$AcBinomial, 'Phalaris arundinacea')
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
exotics <- c(subset(listspp, Eastern.North.America %in% "X")$AcTaxon, subset(listspp, Eastern.North.America %in% "X")$AcBinomial, 'Phalaris arundinacea')
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
exotics
subset(listspp, Eastern.North.America %in% "X")$AcBinomial
exotics
exotics <- c(subset(as.character(listspp, Eastern.North.America %in% "X")$AcTaxon), as.character(subset(listspp, Eastern.North.America %in% "X")$AcBinomial), 'Phalaris arundinacea')
as.character(subset(listspp, Eastern.North.America %in% "X")$AcBinomial)
exotics <- c(as.character(subset(listspp, Eastern.North.America %in% "X")$AcTaxon), as.character(subset(listspp, Eastern.North.America %in% "X")$AcBinomial), 'Phalaris arundinacea')
exotics <- c(as.character(subset(listspp, Eastern.North.America %in% "X")$AcTaxon), as.character(subset(listspp, Eastern.North.America %in% "X")$AcBinomial), 'Phalaris arundinacea') %>% unique()
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
exotics <- c(as.character(subset(listspp, Eastern.North.America %in% "X")$AcTaxon),  'Phalaris arundinacea') %>% unique()
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 1,0))
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 'Exotic','Native'))
exoticover <- exoticover %>% group_by(soilplot, exotic) %>% summarise(cover = 100*(1-10^(sum(log10(1-(Total/100.001))))))
View(Com.Sp.mean)
exotics <- c(as.character(subset(listspp, Eastern.North.America %in% "X")$AcTaxon),  'Phalaris arundinacea') %>% unique()
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 'Exotic','Native'))
View(listspp)
listspp[,c('AcTaxon','Wetness')]
wetness <- Com.Sp.mean %>% left_join(listspp[,c('AcTaxon','Wetness')], by=c('Species'='AcTaxon'))
View(wetness)
wetness <- Com.Sp.mean %>% left_join(unique(listspp[,c('AcTaxon','Wetness')]), by=c('Species'='AcTaxon'))
wetness <- wetness %>% group_by(soilplot) %>% summarise(wetness= weighted.mean(Wetness, w=Total, na.rm=TRUE))
View(simplecover)
functionalcover <- makecommunitydataset(simplecover, row='soilplot', column = 'Simple', value =  'cover')
functionalcover <- makecommunitydataset(simplecover, row='soilplot', column = 'Simple', value =  'cover') %>% as.matrix() %>% as.data.frame()
functionalcover <- makecommunitydataset(simplecover, row='soilplot', column = 'Simple', value =  'cover')
functionalcover
functionalcover <- makecommunitydataset(simplecover, row='soilplot', column = 'Simple', value =  'cover')
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 'Exotic','Native'))
exoticover <- exoticover %>% group_by(soilplot, exotic) %>% summarise(cover = 100*(1-10^(sum(log10(1-(Total/100.001))))))
exoticover <- subset(exoticover, exotic %in% 'Exotic') %>% mutate(exotic=Cover)
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 'Exotic','Native'))
exoticover <- exoticover %>% group_by(soilplot, exotic) %>% summarise(cover = 100*(1-10^(sum(log10(1-(Total/100.001))))))
exoticover <- subset(exoticover, exotic %in% 'Exotic')
View(exoticover)
exoticover <- Com.Sp.mean %>% mutate(exotic = ifelse(Species %in% exotics, 'Exotic','Native'))
exoticover <- exoticover %>% group_by(soilplot, exotic) %>% summarise(cover = 100*(1-10^(sum(log10(1-(Total/100.001))))))
exoticover <- subset(exoticover, exotic %in% 'Exotic') %>% mutate(Exotic=cover)
functionalcover <- wetness %>% left_join(exoticover[c('soilplot', 'Exotic')])
View(functionalcover)
functionalcover <- wetness %>% left_join(exoticover[c('soilplot', 'Exotic')]) %>% left_join(overstorycover[c('soilplot', 'overstorycover')])
evergreen <- subset(simplecover, Simple %in% 'Evergreen')
View(evergreen)
View(functionalcover)
simplecover
functionalcover <- makecommunitydataset(as.data.frame(simplecover), row='soilplot', column = 'Simple', value =  'cover')
functionalcover
View(functionalcover)
functionalcover <- functionalcover %>% mutate(soilplot = rownames(functionalcover))
functionalcover <- functionalcover %>% left_join(exoticover[c('soilplot', 'Exotic')]) %>% left_join(overstorycover[c('soilplot', 'overstorycover')])
View(wetness)
functionalcover <- makecommunitydataset(as.data.frame(simplecover), row='soilplot', column = 'Simple', value =  'cover')
functionalcover <- functionalcover %>% mutate(soilplot = rownames(functionalcover))
functionalcover <- functionalcover %>% left_join(exoticover[c('soilplot', 'Exotic')]) %>%
left_join(overstorycover[c('soilplot', 'overstorycover')]) %>%
left_join(wetness)
functionalcover <- functionalcover %>% mutate(Exotic = ifelse(is.na(Exotic), 0, Exotic))
rownames(functionalcover) <- functionalcover$soilplot
rownames(functionalcover) <- functionalcover$soilplot %>% subset(select= -soilplot)
functionalcover <- subset(functionalcover, select= -soilplot)
functionaldist <- vegdist(functionalcover, method = 'euclidean')
View(functionalcover)
functionaldist
source('functionalveg.R')
#functional ----
p1=plotdata.forest.normal
fd <- vegdist(functionalcover, method = 'euclidean')
k = 3
ft  <- fd %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
fd <- vegdist(functionalcover, method = 'euclidean')
k = 3
ft  <- fd %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
d <- vegdist(functionalcover, method = 'euclidean')
k = 3
t  <- d %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
source('USNVC_compare_specieslists_loop_by_cluster.R')
source('run.aggregate_plot_summary.R')
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
plotassociations[order(as.numeric(as.character(plotassociations$clust))),c("clust", "scientificname")]
d <- vegdist(functionalcover, method = 'euclidean')
k = 4
t  <- d %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
source('USNVC_compare_specieslists_loop_by_cluster.R')
source('run.aggregate_plot_summary.R')
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
plotassociations[order(as.numeric(as.character(plotassociations$clust))),c("clust", "scientificname")]
#functional ----
d <- vegdist(functionalcover, method = 'euclidean')
k = 5
t  <- d %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
source('USNVC_compare_specieslists_loop_by_cluster.R')
source('run.aggregate_plot_summary.R')
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
plotassociations[order(as.numeric(as.character(plotassociations$clust))),c("clust", "scientificname")]
d <- vegdist(functionalcover, method = 'euclidean')
k = 10
t  <- d %>% agnes(method = 'ward') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
source('USNVC_compare_specieslists_loop_by_cluster.R')
source('run.aggregate_plot_summary.R')
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
plotassociations[order(as.numeric(as.character(plotassociations$clust))),c("clust", "scientificname")]
fd <- vegdist(functionalcover, method = 'euclidean')
d = vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
fd
max(d)
max(fd)
d <- vegdist(functionalcover, method = 'euclidean')
t  <- d %>% agnes(method = 'average') %>% as.hclust() %>% dendsort()
groups <- cutree(ft, k = k)
groups <- grouporder(ft, groups)
if (T){
a <- 'functional groups'
makeplotgroup(a,fd,ft,groups)
}
source('groupplotsummary.R')
source('USNVC_compare_specieslists_loop_by_cluster.R')
source('run.aggregate_plot_summary.R')
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
plotassociations[order(as.numeric(as.character(plotassociations$clust))),c("clust", "scientificname")]
fd <- vegdist(functionalcover, method = 'euclidean')
d = vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
min(d)
max(fd)
min(fd)
d
d = vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
dtable <- d %>% as.matrix()
View(dtable)
d = vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
min(fd)
max(fd)
dtable <- d %>% as.matrix()
fdtable <- fd %>% as.matrix()
View(fdtable)
View(dtable)
