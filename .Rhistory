## ------------------------------------------------------------------------------------------------------
# original field data (27 levels)
length(unique(pedons$hzname))
# new generalized data (6 levels, including not-used)
length(unique(pedons$newgenhz2))
## ---- warning = FALSE----------------------------------------------------------------------------------
## STEP 9
# get the horizon data frame out of the SPC
hzdata <- horizons(pedons)
library(dplyr, warn.conflicts = FALSE)
# summarize horizon groups with single summary statistics
#   using mean, sd, min, max, quantile
res_df <- hzdata %>%
group_by(newgenhz2) %>%
summarize(clay_mean = mean(clay, na.rm = TRUE),
clay_sd = sd(clay, na.rm = TRUE),
clay_min = min(clay, na.rm = TRUE),
clay_max = max(clay, na.rm = TRUE),
clay_Q05 = quantile(clay, probs = 0.05, na.rm = TRUE),
clay_Q50 = quantile(clay, probs = 0.5, na.rm = TRUE),
clay_Q95 = quantile(clay, probs = 0.95, na.rm = TRUE))
newgenhz2
## ---- message=FALSE, warning=FALSE---------------------------------------------------------------------
library(aqp, warn.conflicts = FALSE)
library(soilDB)
## STEP 1
# load sample `loafercreek` data from the soilDB package
data("loafercreek")
p <- fetchNASIS('pedons', SS=F)
## STEP 2
# keep only the first 20 pedons
pedons <- p[1:20, ]
# plot profile sketches
par(mar=c(0,0,2,1))
plot(pedons, name='hzname', print.id=FALSE)
## ------------------------------------------------------------------------------------------------------
# after loading your data as a SoilProfileCollection, save it
save(pedons, file = "my_pedons.Rda")
## ------------------------------------------------------------------------------------------------------
## STEP 3
# tabulate hzname
table(pedons$hzname)
# these are the _unique_ horizon designations in our subset `pedons`
unique(pedons$hzname)
## ------------------------------------------------------------------------------------------------------
l <- fetchOSD('loafercreek')
l$hzname
## ------------------------------------------------------------------------------------------------------
## STEP 4
# create 4 GHLs: A, upper transitional, argillic and bedrock
prototype.labels <- c('O','A',
'BA',
'Bt',
'Cr')
## ------------------------------------------------------------------------------------------------------
## STEP 5
# REGEX rules describing mapping from field data to prototype.labels
patterns.to.match <- c('O','^A',
'^B[^Ct]*$',
'.*B.*t.*',
'Cr|R')
## ------------------------------------------------------------------------------------------------------
# apply prototype labels `new` to horizons matching `pat`
pedons$newgenhz <- generalize.hz(x = pedons$hzname,
new = prototype.labels,
pat = patterns.to.match)
## ------------------------------------------------------------------------------------------------------
## STEP 6
# cross-tabulate results
oldvsnew <- addmargins(table(pedons$newgenhz, pedons$hzname))
oldvsnew
## ------------------------------------------------------------------------------------------------------
# find which columns are greater than zero in row 'not-used'
col.idx.not.used <- which(oldvsnew['not-used',] > 0)
# what column indexes (field horizon designations) did not get mapped onto a row (generalized hz label)?
col.idx.not.used
# show just those columns
oldvsnew[, col.idx.not.used]
## ------------------------------------------------------------------------------------------------------
## REPEAT STEPS 4 AND 5
# create 5 generalized horizons: A, upper transitional, argillic, lower-transitional and bedrock
prototype.labels.v2 <- c('A',
'BA',
'Bt',
'BC',
'Cr')
# REGEX rules describing mapping from field data to prototype.labels
patterns.to.match.v2 <- c('^A',
'^B[^Ct]*$',
'.*B.*t.*',
'C[^t]*',
'Cr|R')
# use generalize.hz() to apply a set of patterns and paired labels
# to the `pedons$hzname` character vector containing field designations
pedons$newgenhz2 <- generalize.hz(x = pedons$hzname,
new = prototype.labels.v2,
pat = patterns.to.match.v2)
## ------------------------------------------------------------------------------------------------------
## REPEAT STEP 6
# create a second cross-tabulation, using the updated genhz
oldvsnew2 <- addmargins(table(pedons$newgenhz2, pedons$hzname))
# find which table columns are greater than zero in row 'not-used'
col.idx.not.used <- which(oldvsnew2['not-used',] > 0)
# show just those columns
oldvsnew2[, col.idx.not.used]
## ----eval=F--------------------------------------------------------------------------------------------
## # check for equality (assignment 1 versus assignment 2)
## pedons$newgenhz == pedons$newgenhz2
## ------------------------------------------------------------------------------------------------------
## RESULT #1
# plot profile sketches - first 20 profiles; color by gen hz.
par(mar=c(0,0,3,1))
plotSPC(pedons,
name = 'hzname',
color = 'newgenhz2',
print.id = FALSE)
## ------------------------------------------------------------------------------------------------------
# original field data (27 levels)
length(unique(pedons$hzname))
# new generalized data (6 levels, including not-used)
length(unique(pedons$newgenhz2))
## ---- warning = FALSE----------------------------------------------------------------------------------
## STEP 9
# get the horizon data frame out of the SPC
hzdata <- horizons(pedons)
library(dplyr, warn.conflicts = FALSE)
# summarize horizon groups with single summary statistics
#   using mean, sd, min, max, quantile
res_df <- hzdata %>%
group_by(newgenhz2) %>%
summarize(clay_mean = mean(clay, na.rm = TRUE),
clay_sd = sd(clay, na.rm = TRUE),
clay_min = min(clay, na.rm = TRUE),
clay_max = max(clay, na.rm = TRUE),
clay_Q05 = quantile(clay, probs = 0.05, na.rm = TRUE),
clay_Q50 = quantile(clay, probs = 0.5, na.rm = TRUE),
clay_Q95 = quantile(clay, probs = 0.95, na.rm = TRUE))
library(aqp)
library(soilDB)
# modern vector data structures / manipulation
library(sf)
# old-style vector/raster data structure / manipulation
library(sp)
# GDAL library / tools
library(rgdal)
# gridded data management / analysis
library(raster)
library(mapview)
remotes::install_github('r-spatial/mapview')
install.packages(c("backports", "broom", "cachem", "cli", "coin", "crayon", "crul", "data.table", "dbplyr", "deldir", "desc", "dotCall64", "dplyr", "farver", "fastmap", "forcats", "gargle", "gert", "gifski", "Hmisc", "insight", "ipred", "isoband", "knitr", "labelled", "libcoin", "lidR", "lifecycle", "lubridate", "mathjaxr", "MatrixModels", "matrixStats", "memoise", "mice", "mime", "mlbench", "multcomp", "party", "pbkrtest", "pillar", "pkgload", "promises", "proxy", "ps", "quantreg", "ragg", "rappdirs", "rasterVis", "RcppArmadillo", "RcppParallel", "rgbif", "rgdal", "rgl", "rgrass7", "rio", "rmarkdown", "rms", "rmsb", "RSQLite", "rvest", "sass", "sharpshootR", "SparseM", "spatstat.data", "spatstat.utils", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tibble", "tidyr", "tinytex", "units", "usethis", "waldo", "wk", "xfun", "xmlparsedata", "zoo"))
install.packages(c("RcppArmadillo", "terra", "textshaping", "zoo"))
install.packages("terra")
install.packages("lidR")
library(lidR)
detach("package:lidR", unload = TRUE)
install.packages("rlas")
install.packages("terra")
# packages ----
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(plyr)
library(dynamicTreeCut)
library(proxy)
library(Hmisc)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# functions ----
substitutesymbols <- as.data.frame(cbind(SYMBOL2=c('2AG','TRBO2','SMLA3','CAREX'), form2=c('Nonvascular','Forb/Herb','Forb/Herb','Grass/grass-like (Graminoids)'), type2=c('Native','Native','Native','Native'), taxon=c('Chara','Lysimachia borealis','Smilax lasioneuron','Carex [ovales]')), stringsAsFactors = FALSE)
makeplot <- function(a,d,t,k){
filename <- paste0('output/plot_',"_",a,'.png')
#make cuts and reformat dendrogram
groups <- cutree(t, k = k)
plot <- names(groups)
cluster <- unname(groups)
groupdf <- as.data.frame(cbind(plot, cluster))
groupdf$cluster <- (as.numeric(as.character(groupdf$cluster)))
maxcluster <- max(groupdf$cluster)
numberzeros <- nrow(groupdf[(groupdf$cluster == 0),])
whichrecords <- which(groupdf$cluster == 0)
if (nrow(groupdf[groupdf$cluster == 0,]) != 0){
for (i in 1:numberzeros){ #assign all zero clusters to unique cluster number.
groupdf[whichrecords[i],]$cluster <- maxcluster+i}}
newlabels <- t$order.lab
newlabels <- as.data.frame(newlabels)
newlabels$row <- row(newlabels)
newlabels <- merge(newlabels, groupdf, by.x='newlabels', by.y ='plot')
newlabels$newlabels <- paste(newlabels$cluster, newlabels$newlabels)
newlabels <- newlabels[order(newlabels$row),1]
newtree <- t
newtree$order.lab <- newlabels
dend1 <- color_branches(as.hclust(newtree), k = k)
dend1 <- color_labels(dend1, k = k)
#output file
w <- 800
h <- nrow(d)*12+80
u <- 12
png(filename=filename,width = w, height = h, units = "px", pointsize = u)
par(mar = c(2,0,1,13))
plot(dend1, horiz = TRUE, main=paste('floristic simularity', a), font=1, cex=0.84)
dev.off()
}
roundF<-function(p){
p<-ifelse(p<0.5, floor(p/0.1+0.5)*0.1,ifelse(p<2, floor(p/0.5+0.5)*0.5, ifelse(p<5, floor(p+0.5),floor(p/5+0.5)*5)))
}
tofoliar <- function(c){
f <- (0.41*c/100 + 0.41*(c/100)^2)*100
return(f)
}
BA.fact10usc.metric<-function(p){
p*10000/43560*10
}
BA.metric.usc.round<-function(p){
round(p*43560/10000,1)
}
cm.in<-function(p){
round(p/2.54,1)
}
m.ft.round<-function(p){
round(p/0.3048,3)
}
# data ----
plots <- c(
'GRR.GJS.2016.21',
'GRR.GJS.2016.59',
'GRR.GJS.2016.30',
'GRR.GJS.2016.32',
'GRR.2011.GJS.12',
'GRR.GJS.2015.27',
'GRR.GJS.2015.26',
'GRR.GJS.2015.28',
'GRR.GJS.2015.20',
'GRR.GJS.2015.22',
'GRR.GJS.2015.21',
'GRR.GJS.2015.25',
'GRR.GJS.2015.29',
'GRR.GJS.2015.30',
'GRR.GJS.2017.8',
'GRR.GJS.2017.9',
'GRR.GJS.2017.19',
'GRR.GJS.2017.23',
'GRR.GJS.2018.13',
'GRR.GJS.2018.14',
'GRR.GJS.2018.3',
'GRR.GJS.2018.4',
'GRR.GJS.2018.5',
'GRR.GJS.2018.17',
'GRR.GJS.2018.21',
'GRR.GJS.2018.22',
'GRR.GJS.2018.24',
'GRR.GJS.2018.28',
'GRR.GJS.2018.29',
'GRR.GJS.2015.24',
'GRR.GJS.2015.23',
'GRR.GJS.2012.23',
'GRR.GJS.2012.24',
'GRR.GJS.2012.25',
'GRR.GJS.2012.31',
'GRR.GJS.2012.70',
'GRR.GJS.2012.34',
'GRR.GJS.2012.35',
'GRR.GJS.2012.36',
'GRR.GJS.2012.40',
'GRR.GJS.2019.22',
'GRR.GJS.2019.11',
'GRR.GJS.2019.12',
'GRR.GJS.2019.13',
'GRR.GJS.2019.17',
'GRR.GJS.2014.39',
'GRR.GJS.2014.40',
'GRR.GJS.2020.13',
'GRR.GJS.2020.14',
'GRR.GJS.2020.15',
'GRR.GJS.2020.16',
'GRR.GJS.2021.1',
'GRR.GJS.2021.2',
'GRR.GJS.2021.3'
)
# process data ----
List_Habits <- read.delim("data/List_Habits.txt", na.strings = '', stringsAsFactors = FALSE)
Plant_Heights <- read.delim("data/Plant_Heights.txt", na.strings = '', stringsAsFactors = FALSE, encoding = 'UTF-8')
List_Habits[List_Habits$ESIS.Group %in% 'Grass/grass-like',]$ESIS.Group <- 'Grass/grass-like (Graminoids)'
handpicked  <- read.delim("data/handpicked.txt", na.strings = '', stringsAsFactors = FALSE)
listspp <- read.delim("data/List_Species2011.txt", encoding = 'UTF-8', na.strings = '', stringsAsFactors = FALSE)
#listspp <- readRDS("data/listspp.RDS")
#fix for trees and shrub mismatch
SBD2 <- c('Ilex verticillata', 'Salix discolor', 'Salix interior', 'Staphylea trifolia',
'Salix bebbiana', 'Salix eriocephala', 'Salix petiolaris', 'Rhamnus cathartica', 'Frangula alnus',
'Salix exigua', 'Elaeagnus angustifolia','Ptelea trifoliata', 'Toxicodendron vernix')
listspp[listspp$AcTaxon %in% SBD2,]$Form <- 'SBD2'
listspp$Nativity <- ifelse(listspp$Eastern.North.America %in% 'N','Native',ifelse(listspp$Eastern.North.America %in% 'X','Introduced','Unknown'))
obs <- read.delim("data/Sites.txt")
obsspp <- read.delim("data/Observed_Species.txt", encoding = 'UTF-8', na.strings = '')
#obspp.shrub <- unique(subset(obsspp, (Subcanopy > 0 | Tree > 0) & Habit %in% c('SBD2', 'SBE2'), select=c(AcTaxon, Habit)))
#obspp.tree.a <- unique(subset(obsspp, (Subcanopy == 0 & Tree == 0) & Habit %in% c('TBD1', 'TBE1'), select=c(AcTaxon, Habit)))
#obspp.tree.b <- unique(subset(obsspp, (Subcanopy > 0 | Tree > 0) & Habit %in% c('TBD1', 'TBE1'), select=c(AcTaxon, Habit)))
#obspp.tree <- subset(obspp.tree.a, !AcTaxon %in% obspp.tree.b$AcTaxon)
obsspp <- merge(obs[,c('Observation_ID','Observation_Label')],obsspp, by='Observation_ID')
obsspp[obsspp$AcSpecies == 'Phalaris' & !is.na(obsspp$AcTaxon) ,]$AcTaxon <- 'Phalaris arundinacea'
obsspp <- obsspp[!grepl("\\?", obsspp$AcTaxon) | is.na(obsspp$AcTaxon) ,]
#obsspp <- subset(obsspp, !is.na(specific_epithet) | AcTaxon %in% c('Sphagnum', 'Chara', 'Cladonia'))
obsspp <- merge(obsspp, List_Habits[,c('Form','Simple')], by.x = 'Habit', by.y = 'Form', all.x = TRUE)
#obsspp <- subset(obsspp, Observation_ID %in% plots)
obsspp[obsspp$BA==0,]$BA <- NA
obsspp$BA <- BA.fact10usc.metric(obsspp$BA)
# observed species means by plot ----
Com.Sp.sum<-aggregate(obsspp[,c('Field', 'Shrub', 'Subcanopy', 'Tree', 'BA')], by=list(obsspp$Observation_ID, obsspp$Observation_Label, obsspp$AcTaxon, obsspp$Simple), FUN=sum) #sum within plot
colnames(Com.Sp.sum)<-c('Observation_ID', 'Observation_Label', 'Species', 'Simple', 'Field', 'Shrub', 'Subcanopy', 'Tree', 'BA') #restore column names
# freq in subplot ----
Com.Sp.freq<-aggregate(obsspp[,c('AcTaxon')], by=list(obsspp$Observation_Label, obsspp$AcTaxon), FUN=length) #frequency within plot
colnames(Com.Sp.freq)<- c('Observation_Label', 'Species', 'freq')
Com.max.freq<-aggregate(Com.Sp.freq[,c('freq')], by=list(Com.Sp.freq$Observation_Label), FUN=max) #freq within plot
colnames(Com.max.freq)<- c('Observation_Label', 'mfreq')
Com.max.freq$mfreq<-ifelse(Com.max.freq$mfreq>4,4,Com.max.freq$mfreq)#effectively ensureing values do not exceed 4. Species listed 5 times might occur if surveyer was unaware of species already counted in subplots, but this only adds a trace amount.
Com.Sp.mean<-merge(Com.Sp.sum, Com.max.freq[,c("Observation_Label","mfreq")], by="Observation_Label")
Com.Sp.mean$Field<-Com.Sp.mean$Field/Com.Sp.mean$mfreq
Com.Sp.mean$Shrub<-Com.Sp.mean$Shrub/Com.Sp.mean$mfreq
Com.Sp.mean$Subcanopy<-Com.Sp.mean$Subcanopy/Com.Sp.mean$mfreq
Com.Sp.mean$Tree<-Com.Sp.mean$Tree/Com.Sp.mean$mfreq
rm(Com.max.freq)
# heights ----
#transfer canopy heights to appropriate stratum
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 15 & is.na(obsspp$Tmax) & !grepl('^H',obsspp$Habit),]$Tmax <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 15 & is.na(obsspp$Tmax) & !grepl('^H',obsspp$Habit),]$Hmax
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 15 & is.na(obsspp$Tmin) & !grepl('^H',obsspp$Habit),]$Tmin <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 15 & is.na(obsspp$Tmin) & !grepl('^H',obsspp$Habit),]$Hmin
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 5 & obsspp$Hmax <= 15 & is.na(obsspp$SCmax) & !grepl('^H',obsspp$Habit),]$SCmax <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 5 & obsspp$Hmax <= 15 & is.na(obsspp$SCmax) & !grepl('^H',obsspp$Habit),]$Hmax
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 5 & obsspp$Hmax <= 15 & is.na(obsspp$SCmin) & !grepl('^H',obsspp$Habit),]$SCmin <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 5 & obsspp$Hmax <= 15 & is.na(obsspp$SCmin) & !grepl('^H',obsspp$Habit),]$Hmin
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0.5 & obsspp$Hmax <= 5 & is.na(obsspp$Smax) & !grepl('^H',obsspp$Habit),]$Smax <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0.5 & obsspp$Hmax <= 5 & is.na(obsspp$Smax) & !grepl('^H',obsspp$Habit),]$Hmax
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0.5 & obsspp$Hmax <= 5 & is.na(obsspp$Smin) & !grepl('^H',obsspp$Habit),]$Smin <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0.5 & obsspp$Hmax <= 5 & is.na(obsspp$Smin) & !grepl('^H',obsspp$Habit),]$Hmin
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0 & obsspp$Hmax <= 0.5 & is.na(obsspp$Fmax) | grepl('^H',obsspp$Habit),]$Fmax <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0 & obsspp$Hmax <= 0.5 & is.na(obsspp$Fmax) | grepl('^H',obsspp$Habit),]$Hmax
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0 & obsspp$Hmax <= 0.5 & is.na(obsspp$Fmin)  | grepl('^H',obsspp$Habit),]$Fmin <-
obsspp[!is.na(obsspp$Hmax) & obsspp$Hmax > 0 & obsspp$Hmax <= 0.5 & is.na(obsspp$Fmin)  | grepl('^H',obsspp$Habit),]$Hmin
Com.Sp.hts<-aggregate(obsspp[,c('Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax','Tmin', 'Tmax', 'Dmin', 'Dmax')], by=list(obsspp$Observation_Label, obsspp$AcTaxon, obsspp$Simple), FUN=mean, na.action = na.omit) #sum within plot
colnames(Com.Sp.hts)<-c('Observation_Label', 'Species', 'Simple', 'Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax','Tmin', 'Tmax', 'Dmin', 'Dmax') #restore column names
#Com.Sp.hts[,c('Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax','Tmin', 'Tmax', 'Dmin', 'Dmax')]<-   lapply(Com.Sp.hts[,c('Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax','Tmin', 'Tmax', 'Dmin', 'Dmax')], FUN = roundF)
Com.Sp.mean <- merge(Com.Sp.mean,Com.Sp.hts, by=c('Observation_Label', 'Species', 'Simple'), all.x = T)
#ensure not to exceed 100%
Com.Sp.mean$Field <- ifelse(Com.Sp.mean$Field > 100,100,Com.Sp.mean$Field)
Com.Sp.mean$Shrub <- ifelse(Com.Sp.mean$Shrub > 100,100,Com.Sp.mean$Shrub)
Com.Sp.mean$Subcanopy <- ifelse(Com.Sp.mean$Subcanopy > 100,100,Com.Sp.mean$Subcanopy)
Com.Sp.mean$Tree <- ifelse(Com.Sp.mean$Tree > 100,100,Com.Sp.mean$Tree)
#average overstory and understory
Com.Sp.mean$Total <- 100*(1-10^(apply(log10(1-(Com.Sp.mean[,c('Field', 'Shrub', 'Subcanopy', 'Tree')]/100.001)), MARGIN = 1, FUN='sum')))
Com.Sp.mean <-subset(Com.Sp.mean, !substr(Species,1,1) %in% '-'& !Species %in% '')
##hand picked phases ----
Com.Sp.groups <- merge(unique(handpicked[,c('Observation_ID', 'phase','wt')]), Com.Sp.mean, by='Observation_ID')
##average spp by phase ----
Com.Sp.groups.sum <- aggregate(Com.Sp.groups[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')],
by=list(Com.Sp.groups$phase, Com.Sp.groups$Species), FUN='sum')
colnames(Com.Sp.groups.sum) <- c('phase', 'Species', 'Field', 'Shrub', 'Subcanopy','Tree', 'Total')
Com.Sp.groups.count <- aggregate(unique(Com.Sp.groups[c('phase', 'Observation_ID')])$Observation_ID,
by=list(unique(Com.Sp.groups[c('phase', 'Observation_ID')])$phase), FUN='length')
colnames(Com.Sp.groups.count) <- c('phase', 'count')
Com.Sp.groups.mean <- merge(Com.Sp.groups.sum, Com.Sp.groups.count, by = 'phase')
Com.Sp.groups.mean[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')] <- Com.Sp.groups.mean[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')]/Com.Sp.groups.mean$count
rm(Com.Sp.groups.sum, Com.Sp.groups.count)
# aggregated total overstory and understory for species ranking
Com.Sp.groups.mean$over <- 100*(1-10^(apply(log10(1-(Com.Sp.groups.mean[,c('Subcanopy', 'Tree')]/100.001)), MARGIN = 1, FUN='sum')))
Com.Sp.groups.mean$under <- 100*(1-10^(apply(log10(1-(Com.Sp.groups.mean[,c('Field', 'Shrub')]/100.001)), MARGIN = 1, FUN='sum')))
##average heights by phase ----
Com.Sp.groups.hts <- aggregate(Com.Sp.groups[,c('Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax', 'Tmin', 'Tmax', 'Dmin', 'Dmax')],
by=list(Com.Sp.groups$phase, Com.Sp.groups$Species), FUN='mean', na.rm=TRUE)
colnames(Com.Sp.groups.hts) <- c('phase', 'Species', 'Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax','Tmin', 'Tmax', 'Dmin', 'Dmax')
for (i in 1:ncol(Com.Sp.groups.hts)){#i=3
Com.Sp.groups.hts[is.nan(Com.Sp.groups.hts[,i]),i] <- NA
}#clean up NaNs
##frequency spp by phase ----
Com.Sp.prefreq <- Com.Sp.groups
Com.Sp.prefreq$Total <- ifelse(Com.Sp.prefreq$Total >0, Com.Sp.prefreq$wt,0)
Com.Sp.freq.sum <- aggregate(Com.Sp.prefreq$Total,
by=list(Com.Sp.prefreq$phase, Com.Sp.prefreq$Species), FUN='sum')
colnames(Com.Sp.freq.sum) <- c('phase', 'Species', 'freq')
Com.Sp.groups.count <- aggregate(unique(Com.Sp.prefreq[c('phase','wt', 'Observation_ID')])$wt,
by=list(unique(Com.Sp.prefreq[c('phase', 'Observation_ID')])$phase), FUN='sum')
colnames(Com.Sp.groups.count) <- c('phase', 'count')
Com.Sp.groups.freq <- merge(Com.Sp.freq.sum, Com.Sp.groups.count, by = 'phase')
Com.Sp.groups.freq$freq <- Com.Sp.groups.freq$freq/Com.Sp.groups.freq$count*100
Com.Sp.groups.mean <- merge(Com.Sp.groups.mean, Com.Sp.groups.freq[,c('phase', 'Species', 'freq')], by = c('phase', 'Species'))
Com.Sp.groups.mean$freqcover <- (Com.Sp.groups.mean$Total+Com.Sp.groups.mean$freq*3)/4
rm(Com.Sp.freq.sum, Com.Sp.groups.count)
#percentile spp by phase ----
Com.Sp.groups.pctl <- ddply(Com.Sp.groups, c('phase', 'Species'), summarise,
f25 = quantile(Field, 0.15),
f75 = quantile(Field, 0.85),
s25 = quantile(Shrub, 0.15),
s75 = quantile(Shrub, 0.85),
sc25 = quantile(Subcanopy, 0.15),
sc75 = quantile(Subcanopy, 0.85),
t25 = quantile(Tree, 0.15),
t75 = quantile(Tree, 0.85),
b05 = quantile(BA, 0.05, na.rm = TRUE),
b95 = quantile(BA, 0.95, na.rm = TRUE)
)
Com.Sp.groups.pctl <- merge(Com.Sp.groups.pctl, Com.Sp.groups.freq, by.x=c('phase', 'Species'), by.y=c('phase', 'Species'), all.x = T)
# adjust max min values to frequency
Com.Sp.groups.pctl$f75 <- pmin(1,Com.Sp.groups.pctl$freq*3/200)*Com.Sp.groups.pctl$f75
Com.Sp.groups.pctl$s75 <- pmin(1,Com.Sp.groups.pctl$freq*3/200)*Com.Sp.groups.pctl$s75
Com.Sp.groups.pctl$sc75 <- pmin(1,Com.Sp.groups.pctl$freq*3/200)*Com.Sp.groups.pctl$sc75
Com.Sp.groups.pctl$t75 <- pmin(1,Com.Sp.groups.pctl$freq*3/200)*Com.Sp.groups.pctl$t75
Com.Sp.groups.pctl$b95 <- pmin(1,Com.Sp.groups.pctl$freq*3/200)*Com.Sp.groups.pctl$b95
Com.Sp.groups.pctl$f25 <- pmax(0,Com.Sp.groups.pctl$freq*3/200-1/2)*Com.Sp.groups.pctl$f25
Com.Sp.groups.pctl$s25 <- pmax(0,Com.Sp.groups.pctl$freq*3/200-1/2)*Com.Sp.groups.pctl$s25
Com.Sp.groups.pctl$sc25 <- pmax(0,Com.Sp.groups.pctl$freq*3/200-1/2)*Com.Sp.groups.pctl$sc25
Com.Sp.groups.pctl$t25 <- pmax(0,Com.Sp.groups.pctl$freq*3/200-1/2)*Com.Sp.groups.pctl$t25
Com.Sp.groups.pctl$b05 <- pmax(0,Com.Sp.groups.pctl$freq*3/200-1/2)*Com.Sp.groups.pctl$b05
#Com.Sp.groups.pctl[,c('f05','s05','sc05','t05','f75','s75','sc75','t75','b05','b95')] <- lapply(Com.Sp.groups.pctl[,c('f05','s05','sc05','t05','f75','s75','sc75','t75','b05','b95')], FUN=roundF)
##combine results ----
Group.Summary <- merge(Com.Sp.groups.pctl, Com.Sp.groups.hts, by=c('phase','Species'), all.x = T)
Group.Summary <- merge(listspp[,c('Taxon', 'Symbol','Form','Nativity')], Group.Summary, by.x = 'Taxon', by.y = 'Species', all.y = TRUE)
Group.Summary <- merge(Group.Summary, substitutesymbols, by.x = 'Taxon', by.y='taxon', all.x = TRUE)
Group.Summary <- merge(List_Habits[,c('Form', 'ESIS.Group')], Group.Summary, by = 'Form', all.y = TRUE)
Group.Summary <- merge(Group.Summary, Com.Sp.groups.mean[,c('Species','phase','over','under')],
by.x = c('Taxon','phase'), by.y=c('Species','phase'), all.x = TRUE)
##replacement values ----
Group.Summary[is.na(Group.Summary$Symbol) & !is.na(Group.Summary$SYMBOL2),]$Symbol <-
Group.Summary[is.na(Group.Summary$Symbol) & !is.na(Group.Summary$SYMBOL2),]$SYMBOL2
Group.Summary[is.na(Group.Summary$ESIS.Group) & !is.na(Group.Summary$form2),]$ESIS.Group <-
Group.Summary[is.na(Group.Summary$ESIS.Group) & !is.na(Group.Summary$form2),]$form2
Group.Summary[is.na(Group.Summary$Nativity) & !is.na(Group.Summary$type2),]$Nativity <-
Group.Summary[is.na(Group.Summary$Nativity) & !is.na(Group.Summary$type2),]$type2
# group summary export and fix missing heights ----
Group.Summary <- Group.Summary[order(Group.Summary$phase, Group.Summary$Taxon),c( 'phase','Taxon', 'Symbol', 'ESIS.Group','Nativity', 'f25', 'f75', 's25', 's75', 'sc25', 'sc75', 't25', 't75', 'Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax', 'Tmin', 'Tmax','Dmin','Dmax','b05','b95', 'over', 'under')]
colnames(Group.Summary) <- c( 'phase','Taxon', 'Plant.Symbol', 'Plant.Type','Nativity', 'f25', 'f75', 's25', 's75', 'sc25', 'sc75', 't25', 't75', 'Fmin', 'Fmax', 'Smin', 'Smax', 'SCmin', 'SCmax', 'Tmin', 'Tmax','Dmin','Dmax','b05','b95', 'over', 'under')
Group.Summary$maxHt <- pmax(Group.Summary$Fmax,Group.Summary$Smax,Group.Summary$SCmax,Group.Summary$Tmax, na.rm = TRUE)
Group.Summary <- merge(Group.Summary, Plant_Heights[,c('Scientific.Name', 'Ht_m')], by.x = 'Taxon', by.y='Scientific.Name', all.x=TRUE)
Group.Summary[is.na(Group.Summary$maxHt),]$maxHt <- Group.Summary[is.na(Group.Summary$maxHt),]$Ht_m
Group.Summary[Group.Summary$Plant.Type %in% 'Vine/Liana',]$maxHt <- NA
Forest.Overstory <- Group.Summary[Group.Summary$t75 >0,c( 'phase','Taxon',  'Plant.Symbol', 'Plant.Type','Nativity', 't25', 't75','Tmin', 'Tmax','Dmin','Dmax','b05','b95', 'maxHt', 'over')]
colnames(Forest.Overstory) <- c('phase','Taxon',  'Plant.Symbol', 'Plant.Type','Nativity', 'Cover.Low', 'Cover.High','Canopy.Bottom', 'Canopy.Top','Diam.Low','Diam.High','BA.Low','BA.High', 'maxHt', 'over')
Forest.Overstory[is.na(Forest.Overstory$Canopy.Bottom & Forest.Overstory$Plant.Type %in% c('Shrub/Subshrub','Vine/Liana')),]$
Canopy.Bottom <- 5
Forest.Overstory[is.na(Forest.Overstory$Canopy.Bottom) & Forest.Overstory$Plant.Type %in% c('Tree'),]$
Canopy.Bottom <- 10
Forest.Overstory[is.na(Forest.Overstory$Canopy.Top) & Forest.Overstory$Plant.Type %in% c('Shrub/Subshrub','Vine/Liana'),]$
Canopy.Top <- 20
Forest.Overstory[is.na(Forest.Overstory$Canopy.Top) & Forest.Overstory$Plant.Type %in% c('Tree'),]$
Canopy.Top <- 25
Forest.Overstory[is.na(Forest.Overstory$Canopy.Bottom),]$
Canopy.Bottom <- 15
Forest.Overstory$Canopy.Top <- ifelse(!is.na(Forest.Overstory$maxHt) & Forest.Overstory$maxHt > 15,
pmin(Forest.Overstory$Canopy.Top,
Forest.Overstory$maxHt),
Forest.Overstory$Canopy.Top)
Forest.Overstory$Canopy.Bottom <- ifelse(!is.na(Forest.Overstory$maxHt & Forest.Overstory$maxHt > 15),
pmin(Forest.Overstory$Canopy.Bottom,
Forest.Overstory$maxHt),
Forest.Overstory$Canopy.Bottom)
Forest.Overstory.sub<- Group.Summary[Group.Summary$sc75 >0,c( 'phase','Taxon', 'Plant.Symbol', 'Plant.Type','Nativity','sc25', 'sc75','SCmin', 'SCmax', 'Dmin','Dmax','b05','b95', 'maxHt', 'over')]
Forest.Overstory.sub[,c('Dmin','Dmax','b05','b95')]<- NA
colnames(Forest.Overstory.sub) <- c('phase','Taxon', 'Plant.Symbol', 'Plant.Type','Nativity', 'Cover.Low', 'Cover.High','Canopy.Bottom', 'Canopy.Top','Diam.Low','Diam.High','BA.Low','BA.High','maxHt', 'over')
Forest.Overstory.sub[is.na(Forest.Overstory.sub$Canopy.Bottom & Forest.Overstory.sub$Plant.Type %in% c('Shrub/Subshrub','Vine/Liana')),]$
Canopy.Bottom <- 2
Forest.Overstory.sub[is.na(Forest.Overstory.sub$Canopy.Bottom & Forest.Overstory.sub$Plant.Type %in% c('Tree')),]$
Canopy.Bottom <- 5
Forest.Overstory.sub[is.na(Forest.Overstory.sub$Canopy.Top) & Forest.Overstory.sub$Plant.Type %in% c('Shrub/Subshrub'),]$
Canopy.Top <- 10
Forest.Overstory.sub[is.na(Forest.Overstory.sub$Canopy.Top) & Forest.Overstory.sub$Plant.Type %in% c('Tree','Vine/Liana'),]$
Canopy.Top <- 15
Forest.Overstory.sub[is.na(Forest.Overstory.sub$Canopy.Bottom),]$
Canopy.Bottom <- 5
Forest.Overstory.sub$Canopy.Top <- ifelse(!is.na(Forest.Overstory.sub$maxHt) & Forest.Overstory.sub$maxHt > 5,
pmin(Forest.Overstory.sub$Canopy.Top,
Forest.Overstory.sub$maxHt),
Forest.Overstory$Canopy.Top)
Forest.Overstory.sub$Canopy.Bottom <- ifelse(!is.na(Forest.Overstory.sub$maxHt & Forest.Overstory.sub$maxHt > 5),
pmin(Forest.Overstory.sub$Canopy.Bottom,
Forest.Overstory.sub$maxHt),
Forest.Overstory.sub$Canopy.Bottom)
Forest.Overstory <- rbind(Forest.Overstory, Forest.Overstory.sub)
Forest.Understory <- Group.Summary[Group.Summary$s75 >0,c( 'phase','Taxon', 'Plant.Symbol', 'Plant.Type','Nativity', 's25', 's75','Smin', 'Smax', 'maxHt', 'under')]
colnames(Forest.Understory) <- c('phase','Taxon','Plant.Symbol', 'Plant.Type','Nativity', 'Cover.Low', 'Cover.High','Canopy.Bottom', 'Canopy.Top', 'maxHt', 'under')
Forest.Understory[is.na(Forest.Understory$Canopy.Bottom) & Forest.Understory$Plant.Type %in% c('Shrub/Subshrub'),]$
Canopy.Bottom <- 0.5
Forest.Understory[is.na(Forest.Understory$Canopy.Bottom) & Forest.Understory$Plant.Type %in% c('Tree','Vine/Liana'),]$
Canopy.Bottom <- 1
Forest.Understory[is.na(Forest.Understory$Canopy.Top) & Forest.Understory$Plant.Type %in% c('Shrub/Subshrub'),]$
Canopy.Top <- 2
Forest.Understory[is.na(Forest.Understory$Canopy.Top) & Forest.Understory$Plant.Type %in% c('Tree','Vine/Liana'),]$
Canopy.Top <- 5
Forest.Understory[is.na(Forest.Understory$Canopy.Bottom),]$
Canopy.Bottom <- 0.5
Forest.Understory$Canopy.Top <- ifelse(!is.na(Forest.Understory$maxHt) & Forest.Understory$maxHt > 0.5,
pmin(Forest.Understory$Canopy.Top,
Forest.Understory$maxHt),
Forest.Understory$Canopy.Top)
Forest.Understory$Canopy.Bottom <- ifelse(!is.na(Forest.Understory$maxHt & Forest.Understory$maxHt > 0.5),
pmin(Forest.Understory$Canopy.Bottom,
Forest.Understory$maxHt),
Forest.Understory$Canopy.Bottom)
View(Forest.Understory)
Forest.Understory.sub <- Group.Summary[Group.Summary$f75 >0,c( 'phase','Taxon','Plant.Symbol', 'Plant.Type','Nativity', 'f25', 'f75','Fmin', 'Fmax', 'maxHt', 'under')]
colnames(Forest.Understory.sub) <- c('phase','Taxon','Plant.Symbol', 'Plant.Type','Nativity', 'Cover.Low', 'Cover.High','Canopy.Bottom', 'Canopy.Top', 'maxHt', 'under')
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Bottom) & Forest.Understory.sub$Plant.Type %in% c('Nonvascular'),]$Canopy.Bottom <- 0.0
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & !is.na(Forest.Understory.sub$maxHt) & Forest.Understory.sub$Plant.Type %in% c('Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb'),]$Canopy.Top <- Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & !is.na(Forest.Understory.sub$maxHt) & Forest.Understory.sub$Plant.Type %in% c('Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb'),]$maxHt
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Bottom) & !is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb'),]$Canopy.Bottom <- Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Bottom) & !is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb'),]$Canopy.Top/2#4+.05
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Bottom) & Forest.Understory.sub$Plant.Type %in% c('Tree','Vine/Liana','Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb', 'Nonvascular'),]$Canopy.Bottom <- 0.1
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Nonvascular'),]$Canopy.Top <- 0.05
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Grass/grass-like (Graminoids)','Fern/fern ally','Forb/Herb'),]$Canopy.Top <- 0.6
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Shrub/Subshrub'),]$Canopy.Top <- 0.3
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Top) & Forest.Understory.sub$Plant.Type %in% c('Tree','Vine/Liana'),]$Canopy.Top <- 0.5
Forest.Understory.sub[is.na(Forest.Understory.sub$Canopy.Bottom),]$
Canopy.Bottom <- 0
View(Forest.Understory.sub)
View(Plant_Heights)
