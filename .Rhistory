sil.flex30 <- 0
sil.flex35 <- 0
sil.ward <- 0
sil.jac <- 0
sil.sim <- 0
sil.diana <- 0
sil.kmeans <- 0
sil.kulc <- 0
sil.kward <- 0
ind.upgma <- 0
ind.flex05 <- 0
ind.flex10 <- 0
ind.flex15 <- 0
ind.flex20 <- 0
ind.flex25 <- 0
ind.flex30 <- 0
ind.flex35 <- 0
ind.ward <- 0
clu.upgma <- 0
clu.flex05 <- 0
clu.flex10 <- 0
clu.flex15 <- 0
clu.flex20 <- 0
clu.flex25 <- 0
clu.flex30 <- 0
clu.flex35 <- 0
clu.ward <- 0
clind.upgma <- 0
clind.flex05 <- 0
clind.flex10 <- 0
clind.flex15 <- 0
clind.flex20 <- 0
clind.flex25 <- 0
clind.flex30 <- 0
clind.flex35 <- 0
clind.ward <- 0
ind.dynamic <- 0
clu.dynamic <- 0
clind.dynamic <- 0
sil.dynamic <- 0
ind.dynamicward <- 0
clu.dynamicward <- 0
clind.dynamicward <- 0
sil.dynamicward <- 0
k
ind.upgma.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayagnes)))
ind.flex05.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex05)))
ind.flex10.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex10)))
ind.flex15.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex15)))
ind.flex20.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex20)))
ind.flex25.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex25)))
ind.flex30.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex30)))
ind.flex35.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayflex35)))
ind.ward.0 <- optimclass(plotdata1, stride(k, as.hclust(tbrayward)))
ind.upgma.1 <- ind.upgma.0$sig.spc
ind.flex05.1 <- ind.flex05.0$sig.spc
ind.flex10.1 <- ind.flex10.0$sig.spc
ind.flex15.1 <- ind.flex15.0$sig.spc
ind.flex20.1 <- ind.flex20.0$sig.spc
ind.flex25.1 <- ind.flex25.0$sig.spc
ind.flex30.1 <- ind.flex30.0$sig.spc
ind.flex35.1 <- ind.flex35.0$sig.spc
ind.ward.1 <- ind.ward.0$sig.spc
clu.upgma.1 <- ind.upgma.0$sig.clust
clu.flex05.1 <- ind.flex05.0$sig.clust
clu.flex10.1 <- ind.flex10.0$sig.clust
clu.flex15.1 <- ind.flex15.0$sig.clust
clu.flex20.1 <- ind.flex20.0$sig.clust
clu.flex25.1 <- ind.flex25.0$sig.clust
clu.flex30.1 <- ind.flex30.0$sig.clust
clu.flex35.1 <- ind.flex35.0$sig.clust
clu.ward.1 <- ind.ward.0$sig.clust
clind.upgma.1 <- ind.upgma.1*clu.upgma.1/k
clind.flex05.1 <- ind.flex05.1*clu.flex05.1/k
clind.flex10.1 <- ind.flex10.1*clu.flex10.1/k
clind.flex15.1 <- ind.flex15.1*clu.flex15.1/k
clind.flex20.1 <- ind.flex20.1*clu.flex20.1/k
clind.flex25.1 <- ind.flex25.1*clu.flex25.1/k
clind.flex30.1 <- ind.flex30.1*clu.flex30.1/k
clind.flex35.1 <- ind.flex35.1*clu.flex35.1/k
clind.ward.1 <- ind.ward.1*clu.ward.1/k
sil.upgma.1 <- (tbrayagnes %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex05.1 <- (tbrayflex05 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex10.1 <- (tbrayflex10 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex15.1 <- (tbrayflex15 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex20.1 <- (tbrayflex20 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex25.1 <- (tbrayflex25 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex30.1 <- (tbrayflex30 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.flex35.1 <- (tbrayflex35 %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.ward.1 <- (tbrayward %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.jac.1 <- (tjacagnes %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.sim.1 <- (tsimpagnes %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.diana.1 <- (tbraydiana %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.kmeans.1 <- (kmeans(distbray, centers = k)$cluster %>% silhouette(distbray))[,3] %>% mean
sil.kulc.1 <- (tkulcagnes %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
sil.kward.1 <- (tkulcward %>% cutree(k=k) %>% silhouette(distbray))[,3]%>% mean
klevel <- c(klevel, k)
ind.upgma <- c(ind.upgma, ind.upgma.1)
ind.flex05 <- c(ind.flex05, ind.flex05.1)
ind.flex10 <- c(ind.flex10, ind.flex10.1)
ind.flex15 <- c(ind.flex15, ind.flex15.1)
ind.flex20 <- c(ind.flex20, ind.flex20.1)
ind.flex25 <- c(ind.flex25, ind.flex25.1)
ind.flex30 <- c(ind.flex30, ind.flex30.1)
ind.flex35 <- c(ind.flex35, ind.flex35.1)
ind.ward <- c(ind.ward, ind.ward.1)
clu.upgma <- c(clu.upgma, clu.upgma.1)
clu.flex05 <- c(clu.flex05, clu.flex05.1)
clu.flex10 <- c(clu.flex10, clu.flex10.1)
clu.flex15 <- c(clu.flex15, clu.flex15.1)
clu.flex20 <- c(clu.flex20, clu.flex20.1)
clu.flex25 <- c(clu.flex25, clu.flex25.1)
clu.flex30 <- c(clu.flex30, clu.flex30.1)
clu.flex35 <- c(clu.flex35, clu.flex35.1)
clu.ward <- c(clu.ward, clu.ward.1)
clind.upgma <- c(clind.upgma, clind.upgma.1)
clind.flex05 <- c(clind.flex05, clind.flex05.1)
clind.flex10 <- c(clind.flex10, clind.flex10.1)
clind.flex15 <- c(clind.flex15, clind.flex15.1)
clind.flex20 <- c(clind.flex20, clind.flex20.1)
clind.flex25 <- c(clind.flex25, clind.flex25.1)
clind.flex30 <- c(clind.flex30, clind.flex30.1)
clind.flex35 <- c(clind.flex35, clind.flex35.1)
clind.ward <- c(clind.ward, clind.ward.1)
sil.upgma <- c(sil.upgma, sil.upgma.1)
sil.flex05 <- c(sil.flex05, sil.flex05.1)
sil.flex10 <- c(sil.flex10, sil.flex10.1)
sil.flex15 <- c(sil.flex15, sil.flex15.1)
sil.flex20 <- c(sil.flex20, sil.flex20.1)
sil.flex25 <- c(sil.flex25, sil.flex25.1)
sil.flex30 <- c(sil.flex30, sil.flex30.1)
sil.flex35 <- c(sil.flex35, sil.flex35.1)
sil.ward <- c(sil.ward, sil.ward.1)
sil.jac <- c(sil.jac, sil.jac.1)
sil.sim <- c(sil.sim, sil.sim.1)
sil.diana <- c(sil.diana, sil.diana.1)
sil.kmeans <- c(sil.kmeans, sil.kmeans.1)
sil.kulc <- c(sil.kulc, sil.kulc.1)
sil.kward <- c(sil.kward, sil.kward.1)
strd0 <- stride(k, as.hclust(tbraydynam))
maxCoreScatter <- dk[dk$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
dyngroups <-
cutreeDynamic(tbraydynam, minClusterSize=1, method = 'hybrid', distM=as.matrix(distbray),deepSplit=1, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
strd0.clustering <- strd0$clustering
strd0.clustering[,1] <- dyngroups
strd0$clustering <- strd0.clustering
ind.dynamic.0 <- optimclass(plotdata1, strd0)
ind.dynamic.1 <- ind.dynamic.0$sig.spc
clu.dynamic.1 <- ind.dynamic.0$sig.clust
clind.dynamic.1 <- ind.dynamic.1*clu.dynamic.1/k
sil.dynamic.1 <- (dyngroups %>% silhouette(distbray))[,3] %>% mean
ind.dynamic <- c(ind.dynamic, ind.dynamic.1)
clu.dynamic <- c(clu.dynamic, clu.dynamic.1)
clind.dynamic <- c(clind.dynamic, clind.dynamic.1)
sil.dynamic <- c(sil.dynamic, sil.dynamic.1)
tbraydynam <- distbray %>% flexbeta(beta= -.2)
#dynamic
strd0 <- stride(k, as.hclust(tbraydynam))
maxCoreScatter <- dk[dk$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
dyngroups <-
cutreeDynamic(tbraydynam, minClusterSize=1, method = 'hybrid', distM=as.matrix(distbray),deepSplit=1, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
strd0.clustering <- strd0$clustering
strd0.clustering[,1] <- dyngroups
strd0$clustering <- strd0.clustering
ind.dynamic.0 <- optimclass(plotdata1, strd0)
ind.dynamic.1 <- ind.dynamic.0$sig.spc
clu.dynamic.1 <- ind.dynamic.0$sig.clust
clind.dynamic.1 <- ind.dynamic.1*clu.dynamic.1/k
sil.dynamic.1 <- (dyngroups %>% silhouette(distbray))[,3] %>% mean
ind.dynamic <- c(ind.dynamic, ind.dynamic.1)
clu.dynamic <- c(clu.dynamic, clu.dynamic.1)
clind.dynamic <- c(clind.dynamic, clind.dynamic.1)
sil.dynamic <- c(sil.dynamic, sil.dynamic.1)
strd0
dyngroups
strd0.clustering
strd0
ind.dynamic.0 <- optimclass(plotdata1, strd0)
ind.dynamic.0
strdw0 <- stride(k, as.hclust(tbrayward))
maxCoreScatter <- dkward[dkward$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
maxCoreScatter
minGap <- (1 - maxCoreScatter) * 3/4
dyngroupw <-
cutreeDynamic(as.hclust(tbrayward), minClusterSize=1, method = 'hybrid', distM=as.matrix(distbray),deepSplit=1, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
dyngroupw
strdw0
strdw0.clustering <- strdw0$clustering
strdw0.clustering[,1] <- dyngroupw
strdw0$clustering <- strdw0.clustering
strdw0
ind.dynamicward.0 <- optimclass(plotdata1, strdw0)
ind.dynamicward.0
ind.dynamicward.1 <- ind.dynamicward.0$sig.spc
clu.dynamicward.1 <- ind.dynamicward.0$sig.clust
ind.dynamicward.1
clu.dynamicward.1
clind.dynamicward.1 <- ind.dynamicward.1*clu.dynamicward.1/k
clind.dynamicward.1
sil.dynamicward.1 <- (dyngroupw %>% silhouette(distbray))[,3] %>% mean
sil.dynamicward.1
clu.dynamicward.1
clind.dynamicward.1
clind.dynamicward
clu.dynamicward
ind.dynamicward <- c(ind.dynamicward, ind.dynamicward.1)
clu.dynamicward <- c(clu.dynamicward, clu.dynamicward.1)
clind.dynamicward <- c(clind.dynamicward, clind.dynamicward.1)
sil.dynamicward <- c(sil.dynamicward, sil.dynamicward.1)
ind.dynamicward
clu.dynamicward
clind.dynamicward
sil.dynamicward
# Load Veg tables ----
source('processplot.R')
#load clustering functions ----
source('clusterfunctions.R')
d <- vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
t <- d %>% flexbeta(beta= -0.20)
tward <- agnes(d, method = 'ward') %>% as.hclust()
dk <- dynamicK(t, d)
dkward <- dynamicK(tward, d)
timeA = Sys.time()
indob <- indanalysisdynamicward(plotdata,dk,dkward, -0.20)
Sys.time() - timeA
ind.table <- indob[[1]]
dni.table <- indob[[2]]
clu.table <- indob[[3]]
ulc.table <- indob[[4]]
clind.table <- indob[[5]]
dnilc.table <- indob[[6]]
sil.table <- indob[[7]]
lis.table <- indob[[8]]
Sys.time() - timeA
View(sil.table)
View(dnilc.table)
View(clu.table)
View(ulc.table)
beta= -0.35
d <- vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
t <- d %>% flexbeta(beta= beta)
tward <- agnes(d, method = 'ward') %>% as.hclust()
dk <- dynamicK(t, d)
dkward <- dynamicK(tward, d)
timeA = Sys.time()
indob <- indanalysisdynamicward(plotdata,dk,dkward, beta)
Sys.time() - timeA
ind.table <- indob[[1]]
dni.table <- indob[[2]]
clu.table <- indob[[3]]
ulc.table <- indob[[4]]
clind.table <- indob[[5]]
dnilc.table <- indob[[6]]
sil.table <- indob[[7]]
lis.table <- indob[[8]]
Sys.time() - timeA
a <- 'flex35dynamic'
k=6
d <- ((vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)))
t <- flexbeta(d, beta= -0.35)
makeplotdynamic(a,d,t,k)
#group parameters ----
beta= -0.20
k = 6
d <- vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)
t <- d %>% flexbeta(beta= beta)
tward <- agnes(d, method = 'ward') %>% as.hclust()
dk <- dynamicK(t, d)
dkward <- dynamicK(tward, d)
groups <- cutree(t, k = k)
maxCoreScatter <- dk[dk$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
dyngroups <-
cutreeDynamic(tbraydynam, minClusterSize=1, method = 'hybrid', distM=as.matrix(distbray),deepSplit=1, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
groups=dyngroups
groups
source('groupplotsummary.R')
soilplot <- names(groups)
clust <- unname(groups)
groupdf <- as.data.frame(cbind(soilplot, clust))
groupdf$clust <- (as.numeric(as.character(groupdf$clust)))
Com.Sp.groups <- merge(groupdf,  Com.Sp.mean, by='soilplot', all.x=TRUE, all.y = TRUE)
Com.Sp.groups.sum <- aggregate(Com.Sp.groups[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')],
by=list(Com.Sp.groups$clust, Com.Sp.groups$Species), FUN='sum')
colnames(Com.Sp.groups.sum) <- c('cluster', 'taxon', 'Field', 'Shrub', 'Subcanopy','Tree', 'Total')
Com.Sp.groups.count <- aggregate(unique(Com.Sp.groups[c('clust', 'soilplot')])$soilplot,
by=list(unique(Com.Sp.groups[c('clust', 'soilplot')])$clust), FUN='length')
colnames(Com.Sp.groups.count) <- c('cluster', 'count')
Com.Sp.groups.mean <- merge(Com.Sp.groups.sum, Com.Sp.groups.count, by = 'cluster')
Com.Sp.groups.mean[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')] <- Com.Sp.groups.mean[,c('Field', 'Shrub', 'Subcanopy','Tree', 'Total')]/Com.Sp.groups.mean$count
rm(Com.Sp.groups.sum, Com.Sp.groups.count)
#frequency spp by cluster
Com.Sp.prefreq <- Com.Sp.groups
Com.Sp.prefreq$Total <- ifelse(Com.Sp.prefreq$Total >0, 1,0)
Com.Sp.freq.sum <- aggregate(Com.Sp.prefreq$Total,
by=list(Com.Sp.prefreq$clust, Com.Sp.prefreq$Species), FUN='sum')
colnames(Com.Sp.freq.sum) <- c('cluster', 'taxon', 'freq')
Com.Sp.groups.count <- aggregate(unique(Com.Sp.prefreq[c('clust', 'soilplot')])$soilplot,
by=list(unique(Com.Sp.prefreq[c('clust', 'soilplot')])$clust), FUN='length')
colnames(Com.Sp.groups.count) <- c('cluster', 'count')
Com.Sp.groups.freq <- merge(Com.Sp.freq.sum, Com.Sp.groups.count, by = 'cluster')
Com.Sp.groups.freq$freq <- Com.Sp.groups.freq$freq/Com.Sp.groups.freq$count*100
Com.Sp.groups.mean <- merge(Com.Sp.groups.mean, Com.Sp.groups.freq[,c('cluster', 'taxon', 'freq')], by = c('cluster', 'taxon'))
Com.Sp.groups.mean$freqcover <- (Com.Sp.groups.mean$Total+Com.Sp.groups.mean$freq*3)/4
rm(Com.Sp.freq.sum, Com.Sp.groups.count)
#Affinity analysis
Com.Sp.groups.spptotals <- aggregate(Com.Sp.groups.mean[,c('freqcover')],
by=list(Com.Sp.groups.mean$taxon), FUN='sum')
colnames(Com.Sp.groups.spptotals) <- c('taxon', 'Totalfreqcover')
Com.Sp.groups.mean <- merge(Com.Sp.groups.mean, Com.Sp.groups.spptotals, by = 'taxon')
Com.Sp.groups.mean$affinity <- (Com.Sp.groups.mean$freq*3 + Com.Sp.groups.mean$freqcover/(Com.Sp.groups.mean$Totalfreqcover+0.0001)*100)/4
#calculate dominant stratum by species in group.
Com.Sp.groups.mean$stratum <- round(
( (Com.Sp.groups.mean$Tree)^2*3+
(Com.Sp.groups.mean$Subcanopy)^2*2.5+
(Com.Sp.groups.mean$Shrub)^2*2+
(Com.Sp.groups.mean$Field)^2*1
)/
( (Com.Sp.groups.mean$Tree)^2+
(Com.Sp.groups.mean$Subcanopy)^2+
(Com.Sp.groups.mean$Shrub)^2+
(Com.Sp.groups.mean$Field)^2
+0.000000001),0)
#Classify Structure
Com.Sp.Agg.groups <- merge(groupdf,  Com.Sp.Agg, by='soilplot', all.x=TRUE, all.y = TRUE)
Com.Sp.Agg.groups.sum <- aggregate(Com.Sp.Agg.groups$Total, by=list(Com.Sp.Agg.groups$clust, Com.Sp.Agg.groups$Simple), FUN='sum')
colnames(Com.Sp.Agg.groups.sum) <- c('cluster', 'simple', 'Total')
Com.Sp.Agg.count <- aggregate(unique(Com.Sp.Agg.groups[c('clust', 'soilplot')])$soilplot,
by=list(unique(Com.Sp.Agg.groups[c('clust', 'soilplot')])$clust), FUN='length')
colnames(Com.Sp.Agg.count) <- c('cluster', 'count')
Com.Sp.Agg.groups.mean <- merge(Com.Sp.Agg.groups.sum, Com.Sp.Agg.count, by = 'cluster')
Com.Sp.Agg.groups.mean$Total <- Com.Sp.Agg.groups.mean$Total/(Com.Sp.Agg.groups.mean$count+0.0001)
rm(Com.Sp.Agg.groups.sum, Com.Sp.Agg.count)
listofsimple <- c("DeciduousShrub", "DeciduousTree", "EvergreenShrub", "EvergreenTree", "Forb", "Graminoid", "Nonvascular")
cluster = unique(Com.Sp.Agg.groups.mean$cluster)
Com.Structure <- as.data.frame(cluster)
for (i in 1:length(listofsimple)){
x <- Com.Sp.Agg.groups.mean[Com.Sp.Agg.groups.mean$simple %in% listofsimple[i],c('cluster','Total')]
Com.Structure <- merge(Com.Structure,x, by='cluster', all.x = TRUE)
Com.Structure$Total <- ifelse(is.na(Com.Structure$Total),0,Com.Structure$Total)
colnames(Com.Structure)[colnames(Com.Structure)=="Total"] <- listofsimple[i]
}
Com.Structure$Structure <-ifelse(Com.Structure$EvergreenTree + Com.Structure$DeciduousTree >= 60,'Forestland',
ifelse(Com.Structure$EvergreenTree + Com.Structure$DeciduousTree >= 25,'Woodland',
ifelse(Com.Structure$EvergreenShrub + Com.Structure$DeciduousShrub >= 25,'Shrubland',
ifelse(Com.Structure$Forb + Com.Structure$Graminoid >= 25,'Herbland',
ifelse(Com.Structure$Nonvascular >= 25,'Mossland',
ifelse(Com.Structure$EvergreenTree + Com.Structure$DeciduousTree +
Com.Structure$EvergreenShrub + Com.Structure$DeciduousShrub +
Com.Structure$Forb + Com.Structure$Graminoid +
Com.Structure$Nonvascular >= 1,'Sparse','Barren'))))))
Com.Structure$Structure <-
ifelse(Com.Structure$Structure %in% 'Forestland' &
Com.Structure$EvergreenTree/(Com.Structure$EvergreenTree+Com.Structure$DeciduousTree)*100 >=75, 'Evergreen Forest',
ifelse(Com.Structure$Structure %in% 'Forestland' &
Com.Structure$EvergreenTree/(Com.Structure$EvergreenTree+Com.Structure$DeciduousTree)*100 >=25, 'Mixed Forest',
ifelse(Com.Structure$Structure %in% 'Forestland', 'Deciduous Forest',Com.Structure$Structure)))
Com.Structure$Structure <-
ifelse(Com.Structure$Structure %in% 'Shrubland' &
Com.Structure$EvergreenShrub/(Com.Structure$EvergreenShrub+Com.Structure$DeciduousShrub)*100 >=50, 'Evergreen Shrubland',
ifelse(Com.Structure$Structure %in% 'Shrubland', 'Deciduous Shrubland',Com.Structure$Structure))
Com.Structure$Structure <-
ifelse(Com.Structure$Structure %in% 'Herbland' &
Com.Structure$Graminoid/(Com.Structure$Graminoid+Com.Structure$Forb)*100 >=50, 'Grassland',
ifelse(Com.Structure$Structure %in% 'Herbland', 'Meadow',Com.Structure$Structure))
Com.Structure$Structure <-
ifelse(Com.Structure$Structure %in% 'Grassland' &
Com.Structure$EvergreenTree+Com.Structure$DeciduousTree >= 10, 'Treed Grassland',
ifelse(Com.Structure$Structure %in% 'Grassland' &
Com.Structure$EvergreenShrub+Com.Structure$DeciduousShrub >= 10, 'Shrubby Grassland',Com.Structure$Structure))
Com.Structure$Structure <-
ifelse(Com.Structure$Structure %in% 'Meadow' &
Com.Structure$EvergreenTree+Com.Structure$DeciduousTree >= 10, 'Treed Meadow',
ifelse(Com.Structure$Structure %in% 'Meadow' &
Com.Structure$EvergreenShrub+Com.Structure$DeciduousShrub >= 10, 'Shrubby Meadow',Com.Structure$Structure))
#group wetness
Com.Sp.Wet.groups <- merge(groupdf,  Com.Sp.Agg.wet, by='soilplot', all.x=TRUE, all.y = TRUE)
Com.Sp.Wet.groups <- Com.Sp.Wet.groups[Com.Sp.Wet.groups$Simple %in% 'Wet',]
Com.Sp.Wet.groups <- aggregate(Com.Sp.Wet.groups$Total, by=list(Com.Sp.Wet.groups$clust), FUN='mean')
colnames(Com.Sp.Wet.groups) <- c('cluster','Wetness')
Com.Structure <- merge(Com.Structure, Com.Sp.Wet.groups, by='cluster', all.x = TRUE)
Com.Structure$WetStructure <-
ifelse(Com.Structure$Wetness >= 50, paste('Wet', Com.Structure$Structure), Com.Structure$Structure)
#----
Com.Sp.groups.mean<- merge(Com.Sp.groups.mean, Com.Structure[,c('cluster','Structure')], by='cluster', all.x = TRUE)
Com.Sp.groups.mean$overunder <- ifelse(Com.Sp.groups.mean$stratum == 3, 1,0)
#rank
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(ranks = order(order(Total, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(freqranks = order(order(freqcover, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(affranks = order(order(affinity, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster, stratum) %>%
dplyr::mutate(subranks = order(order(freqcover, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster, overunder) %>%
dplyr::mutate(overunderranks = order(order(freqcover, decreasing=TRUE)))
Com.rank <- subset(Com.Sp.groups.mean, !stratum %in% 0)
Com.rankA <- subset(Com.rank,
((grepl('Forest',Structure))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(overunderranks <= 1))#forced understory
#(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1,2,3))|(subranks <= 1 & stratum %in% c(2)))#can be all overstory
)|
((grepl('Woodland',Structure))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(overunderranks <= 1))
)|
((grepl('Shrubland',Structure))&
(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1,2))|(subranks <= 1 & stratum %in% c(2)))
)|
((Structure %in% c('Treed Grassland', 'Treed Meadow'))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(subranks <= 1 & stratum %in% c(1,3)))
)|
((Structure %in% c('Shrubby Grassland', 'Shrubby Meadow'))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2))|(subranks <= 1 & stratum %in% c(1,2)))
)|
((Structure %in% c('Grassland', 'Meadow'))&
(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1))|(subranks <= 1 & stratum %in% c(1)))
))
Com.rankB <- subset(Com.rank,
affranks <= 2|(subranks <= 1 & freqranks <= 5)|(subranks <= 1 & affranks <= 5))
Com.Ass <- Com.rankA
Com.Ass <- Com.Ass[,c('cluster', 'taxon', 'stratum', 'freqcover')]
Com.Ass <-
Com.Ass %>%
dplyr::group_by(cluster, stratum) %>%
dplyr::mutate(ranks = order(order(freqcover, decreasing=FALSE)))
Com.Ass$ranks <- Com.Ass$stratum*10+Com.Ass$ranks
Com.Ass <-
Com.Ass %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(ranks = order(order(ranks, decreasing=TRUE)))
Com.Structure$association <- ""
Com.Ass$taxon <- as.character(Com.Ass$taxon)
nclust <- unique(Com.Ass$cluster)
for (i in 1:length(nclust)){
Com.B <- subset(Com.Ass, cluster %in% nclust[i])
nrank <- length(unique(Com.B$ranks))
assname <- ""
for (j in 1:nrank){
assname <- ifelse(j == 1,Com.B[Com.B$ranks %in% j,]$taxon,
ifelse(Com.B[Com.B$ranks %in% j,]$stratum == Com.B[Com.B$ranks %in% (j-1),]$stratum,
paste0(assname, '-',Com.B[Com.B$ranks %in% j,]$taxon),paste0(assname, '/',Com.B[Com.B$ranks %in% j,]$taxon)))
}
Com.Structure[Com.Structure$cluster %in% nclust[i],]$association <- assname
}
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
###end associated spp ###
sil <- (distbray %>% agnes(method = 'ward') %>% cutree(k=10) %>% silhouette(distbray))[,] %>% as.data.frame()
sil.summary <- aggregate(sil[,c('sil_width')], by=list(cluster = sil$cluster ), FUN='mean') %>%  `colnames<-`(c('cluster', 'sil_width'))
saveRDS(Com.Sp.mean, 'D:/scripts/USNVC/data/Com.Sp.mean.RDS')
if (T){
a <- 'flex20'
k=5
d <- ((vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)))
t <- flexbeta(d, beta= -0.20)
makeplot(a,d,t,k)
}
if (T){
a <- 'flex20dynamic'
k=6
d <- ((vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)))
t <- flexbeta(d, beta= -0.20)
makeplotdynamic(a,d,t,k)
}
View(Com.Ass)
View(Com.Sp.Wet.groups)
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
a <- 'flex20dynamic'
k=6
d <- ((vegdist(plotdata, method='bray', binary=FALSE, na.rm=T)))
t <- flexbeta(d, beta= -0.20)
makeplotdynamic(a,d,t,k)
dk= dynamicK(t,d)
deepSplit <- 1
maxCoreScatter <- dk[dk$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
groups <- cutreeDynamic(t, minClusterSize=1, method="hybrid", distM=as.matrix(d),
deepSplit=deepSplit, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
groups
dk
maxCoreScatter
groupdf
filename <- paste0('output/Vegplot_',a,'.png')
t <- as.hclust(t)
#make cuts and reformat dendrogram
ngroups=k
# groups <- cutree(t, k = ngroups)
# groups <- kmeans(d, centers = ngroups)$cluster
# groups = optind$clustering
dk= dynamicK(t,d)
deepSplit <- 1
maxCoreScatter <- dk[dk$nclust %in% k,]$maxcor
minGap <- (1 - maxCoreScatter) * 3/4
groups <- cutreeDynamic(t, minClusterSize=1, method="hybrid", distM=as.matrix(d),
deepSplit=deepSplit, maxCoreScatter=maxCoreScatter, minGap=minGap, maxAbsCoreScatter=NULL, minAbsGap=NULL)
soilplot <- names(d)
clust <- unname(groups)
groupdf <- as.data.frame(cbind(soilplot, clust))
groupdf$clust <- (as.numeric(as.character(groupdf$clust)))
