dplyr::group_by(cluster) %>%
dplyr::mutate(freqranks = order(order(freqcover, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(affranks = order(order(affinity, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster, stratum) %>%
dplyr::mutate(subranks = order(order(freqcover, decreasing=TRUE)))
Com.Sp.groups.mean <-
Com.Sp.groups.mean %>%
dplyr::group_by(cluster, overunder) %>%
dplyr::mutate(overunderranks = order(order(freqcover, decreasing=TRUE)))
Com.rank <- subset(Com.Sp.groups.mean, !stratum %in% 0)
Com.rankA <- subset(Com.rank,
((grepl('Forest',Structure))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(overunderranks <= 1))#forced understory
#(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1,2,3))|(subranks <= 1 & stratum %in% c(2)))#can be all overstory
)|
((grepl('Woodland',Structure))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(overunderranks <= 1))
)|
((grepl('Shrubland',Structure))&
(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1,2))|(subranks <= 1 & stratum %in% c(2)))
)|
((Structure %in% c('Treed Grassland', 'Treed Meadow'))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2,3))|(subranks <= 1 & stratum %in% c(1,3)))
)|
((Structure %in% c('Shrubby Grassland', 'Shrubby Meadow'))&
(((freqranks <= 2 | affranks <= 1) & stratum %in% c(1,2))|(subranks <= 1 & stratum %in% c(1,2)))
)|
((Structure %in% c('Grassland', 'Meadow'))&
(((freqranks <= 3 | affranks <= 1) & stratum %in% c(1))|(subranks <= 1 & stratum %in% c(1)))
))
Com.rankB <- subset(Com.rank,
affranks <= 2|(subranks <= 1 & freqranks <= 5)|(subranks <= 1 & affranks <= 5))
Com.Ass <- Com.rankA
Com.Ass <- Com.Ass[,c('cluster', 'taxon', 'stratum', 'freqcover')]
Com.Ass <-
Com.Ass %>%
dplyr::group_by(cluster, stratum) %>%
dplyr::mutate(ranks = order(order(freqcover, decreasing=FALSE)))
Com.Ass$ranks <- Com.Ass$stratum*10+Com.Ass$ranks
Com.Ass <-
Com.Ass %>%
dplyr::group_by(cluster) %>%
dplyr::mutate(ranks = order(order(ranks, decreasing=TRUE)))
Com.Structure$association <- ""
Com.Ass$taxon <- as.character(Com.Ass$taxon)
nclust <- unique(Com.Ass$cluster)
for (i in 1:length(nclust)){
Com.B <- subset(Com.Ass, cluster %in% nclust[i])
nrank <- length(unique(Com.B$ranks))
assname <- ""
for (j in 1:nrank){
assname <- ifelse(j == 1,Com.B[Com.B$ranks %in% j,]$taxon,
ifelse(Com.B[Com.B$ranks %in% j,]$stratum == Com.B[Com.B$ranks %in% (j-1),]$stratum,
paste0(assname, '-',Com.B[Com.B$ranks %in% j,]$taxon),paste0(assname, '/',Com.B[Com.B$ranks %in% j,]$taxon)))
}
Com.Structure[Com.Structure$cluster %in% nclust[i],]$association <- assname
}
Com.Structure[order(as.numeric(as.character(Com.Structure$cluster))),c("cluster", "association", "WetStructure")]
###end associated spp ###
sil <- (distbray %>% agnes(method = 'ward') %>% cutree(k=10) %>% silhouette(distbray))[,] %>% as.data.frame()
sil.summary <- aggregate(sil[,c('sil_width')], by=list(cluster = sil$cluster ), FUN='mean') %>%  `colnames<-`(c('cluster', 'sil_width'))
saveRDS(Com.Sp.mean, 'D:/scripts/USNVC/data/Com.Sp.mean.RDS')
View(obs)
View(pedonoverride)
View(plotdata)
View(s)
View(obs)
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(dynamicTreeCut)
library(rpart)
library(rpart.plot)
library(goeveg)
library(proxy)
library(optpart)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
betasim <- function(p){
d <- matrix(1, nrow = nrow(p), ncol = nrow(p))
rownames(d) <- rownames(p)
colnames(d) <- rownames(p)
for(j in 1:nrow(p)){
for(k in 1:nrow(p)){
d[j,k] <- 1-sum((p[j,]*p[k,])^0.5)/sqrt(sum(p[j,])*sum(p[k,]))
}}
d<-as.dist(d)
}
makeplot <- function(amethod,d,t,k){
filename <- paste0('output/vegplots_',amethod,'.png')
#make cuts and reformat dendrogram
ngroups=k
groups <- cutree(t, k = ngroups)
soilplot <- names(groups)
clust <- unname(groups)
groupdf <- as.data.frame(cbind(soilplot, clust))
groupdf$clust <- (as.numeric(as.character(groupdf$clust)))
maxcluster <- max(groupdf$clust)
numberzeros <- nrow(groupdf[(groupdf$clust == 0),])
whichrecords <- which(groupdf$clust == 0)
if (nrow(groupdf[groupdf$clust == 0,]) != 0){
for (i in 1:numberzeros){ #assign all zero clusters to unique cluster number.
groupdf[whichrecords[i],]$clust <- maxcluster+i}}
newlabels <- t$order.lab
newlabels <- as.data.frame(newlabels)
newlabels$row <- row(newlabels)
newlabels <- merge(newlabels, groupdf, by.x='newlabels', by.y ='soilplot')
newlabels$newlabels <- paste(newlabels$clust, newlabels$newlabels)
newlabels <- newlabels[order(newlabels$row),1]
newtree <- t
newtree$order.lab <- newlabels
dend1 <- color_branches(as.hclust(newtree), k = ngroups)
dend1 <- color_labels(dend1, k = ngroups)
#output file
w <- 800
h <- nrow(d)*12+80
u <- 12
png(filename=filename,width = w, height = h, units = "px", pointsize = u)
par(mar = c(2,0,1,13))
plot(dend1, horiz = TRUE, main=paste('floristic simularity', amethod,' method of plots'), font=1, cex=0.84)
dev.off()
}
ecoregion <-  read.delim('data/d_usfs_ecoregion2007.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
vegecoregion <-  read.delim('data/UnitXEcoregionUsfs2007.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
vegecoregion <- merge(vegecoregion, ecoregion, by='usfs_ecoregion_2007_id')
unit <-  read.delim('data/unit.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
states <-read.delim('data/d_subnation.txt')
vegstates <-read.delim('data/UnitXSubnation.txt')
vegstates <- merge(vegstates, states, by='subnation_id')
USNVClist <- readRDS('data/USNVClist.RDS')
USNVClist <- subset(USNVClist, !grepl('\\.', acctaxon))
#plotdata <- readRDS('data/plotdata.RDS')
plotdata <- readRDS('data/Com.Sp.mean.RDS')
plotdata$soilplot <- str_replace_all(plotdata$soilplot, '\\)', '.')
plotdata$soilplot <- str_replace_all(plotdata$soilplot, '\\(', '.')
prematrix <- plotdata
Com.Sp.agg <- aggregate(log10(1-(prematrix[,c('Field', 'Shrub', 'Subcanopy', 'Tree')]/100.001)), by=list(soilplot = prematrix$soilplot),  FUN='sum')
Com.Sp.agg[,c('Field', 'Shrub', 'Subcanopy', 'Tree')] <- 100*(1-10^(Com.Sp.agg[,c('Field', 'Shrub', 'Subcanopy', 'Tree')]))
Com.Sp.agg$over <- 100*(1-10^(apply(log10(1-(Com.Sp.agg[,c('Subcanopy', 'Tree')]/100.001)), MARGIN = 1, FUN='sum')))
Com.Sp.agg$under <- 100*(1-10^(apply(log10(1-(Com.Sp.agg[,c('Field', 'Shrub')]/100.001)), MARGIN = 1, FUN='sum')))
Com.Sp.agg$invover <- 100- Com.Sp.agg$over
rownames(Com.Sp.agg) <- Com.Sp.agg$soilplot
Com.Sp.agg <- Com.Sp.agg[,-1]
plotdata$logtotal <- (log10(100*(1-10^(apply(log10(1-(plotdata[,c('Field', 'Shrub', 'Subcanopy', 'Tree')]/100.001)), MARGIN = 1, FUN='sum'))))+2)
plotmatrix <- makecommunitydataset(plotdata, row = 'soilplot', column = 'Species', value = 'logtotal', drop = TRUE)
d <- vegdist(plotmatrix, method='bray', binary=FALSE, na.rm=T)
t <- flexbeta(d, beta =  -0.25)
k=8
groups <- cutree(t, k = k)
soilplot <- names(groups)
clust <- unname(groups)
groupdf <- as.data.frame(cbind(soilplot, clust))
plotgroup <- merge(groupdf, plotdata, by='soilplot')
plotgroupsum <- aggregate(plotgroup$Total, by=list(clust = plotgroup$clust, Species = plotgroup$Species), FUN='sum')
names(plotgroupsum)[names(plotgroupsum)=='x'] <-'sum'
plotgroupmax <- aggregate(plotgroupsum$sum, by=list(clust = plotgroupsum$clust), FUN='max')
names(plotgroupmax)[names(plotgroupmax)=='x'] <-'max'
plotgroupsum <- merge(plotgroupsum, plotgroupmax, by='clust')
plotgroupsum$Imp <- plotgroupsum$sum/plotgroupsum$max
rm(plotgroupmax, plotgroup)
cluster <- '8'
states <- c('MI','IN','OH')
core <- c('MI')
ecoregion <- c('222')
level <- 'Association'
level <- unique(unit[unit$hierarchylevel %in% level,'element_global_id'])
unit$woodland <- 0
unit[substring(unit$unitsort,1,1) %in% '1',]$woodland <- 1
states <- unique(vegstates[vegstates$subnation_code %in% states,'element_global_id'])
core <- unique(vegstates[vegstates$subnation_code %in% core,'element_global_id'])
ecoregion <- unique(vegecoregion[vegecoregion$usfs_ecoregion_2007_concat_cd %in% ecoregion,'element_global_id'])
g <- subset(plotgroupsum, clust==cluster)
plotassociations <- as.data.frame(lapply(as.data.frame(cbind(soilplot='x', clust = 'x', 'element_global_id'=0, 'scientificname'='x')), as.character), stringsAsFactors=FALSE)
for(i in 1:nrow(groupdf)){
g <- subset(plotdata, soilplot==groupdf[i,1])
overstory <- Com.Sp.agg[groupdf[i,1],'over']
overwt <- overstory/(overstory+12.5)*(1+12.5/100)#skews weight to woodlands at 10% cover. Change 12.5 to 50 for a 25% threshold.
g$Imp <- g$Total
g$Imp <- g$Imp^0.5
gtotal <- sum(g$Imp)
vegtotal <- aggregate(USNVClist$x, by=list(element_global_id = USNVClist$element_global_id, scientificname = USNVClist$scientificname), FUN='sum')
names(vegtotal)[names(vegtotal)=='x'] <-'vegtotal'
gmerge <- merge(g, USNVClist, by.x = 'Species', by.y = 'acctaxon')
gmerge$intersect <- (gmerge$Imp*gmerge$x)^0.5
gintersect <- aggregate(gmerge$intersect, by=list(element_global_id = gmerge$element_global_id, scientificname = gmerge$scientificname), FUN='sum')
names(gintersect)[names(gintersect)=='x'] <-'intersect'
g <- merge(gintersect, vegtotal, by=c('element_global_id', 'scientificname'))
g$affinity <- g$intersect/(g$vegtotal*gtotal)^0.5*100
g <- merge(g, unit[,c('element_global_id', 'woodland')], by='element_global_id')
g$wt <- overwt*g$woodland + (1-g$woodland)*(1-overwt)
g$state <- 'no'
if(nrow(g[g$element_global_id %in% states,])>0){
g[g$element_global_id %in% states,]$state <- 'near'}
if(nrow(g[g$element_global_id %in% core,])>0){
g[g$element_global_id %in% core,]$state <- 'yes'}
g$ecoregion <- 'no'
if(nrow(g[g$element_global_id %in% ecoregion,])>0){
g[g$element_global_id %in% ecoregion,]$ecoregion <- 'yes'}
g$level <- 'no'
g[g$element_global_id %in% level,]$level <- 'yes'
g <- subset(g, level == 'yes')
g$best <- g$affinity * g$wt #bias towards matching structure
g[g$ecoregion == 'no',]$best <- g[g$ecoregion == 'no',]$best*0.75
g[g$element_global_id %in% states,]$best <- g[g$element_global_id %in% states,]$best*1/0.75
g[g$element_global_id %in% core,]$best <- g[g$element_global_id %in% core,]$best*1/0.75
g$best <- g$best/max(g$best)*100
g <- g[,!colnames(g)%in% c('intersect','vegtotal')]
rm(gmerge, vegtotal, gintersect)
g <- subset(g, best >= 0 & level == 'yes')# & state == 'yes')
g <- g[order(g$best, decreasing = TRUE),]
plotassociations1 <- as.data.frame(lapply(as.data.frame(cbind(groupdf[i,],g[1,1:2])), as.character), stringsAsFactors=FALSE)
plotassociations <- rbind(plotassociations,plotassociations1)
}
rm(plotassociations1)
plotassociations <- plotassociations[-1,]
plotassociations <- merge(unique(plotdata[,c('soilplot', 'Observation_ID')]), plotassociations, by='soilplot')
write.csv(plotassociations, 'output/allplotassociations.csv', row.names = F)
View(plotdata)
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(dynamicTreeCut)
library(rpart)
library(rpart.plot)
library(goeveg)
library(proxy)
library(optpart)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
betasim <- function(p){
d <- matrix(1, nrow = nrow(p), ncol = nrow(p))
rownames(d) <- rownames(p)
colnames(d) <- rownames(p)
for(j in 1:nrow(p)){
for(k in 1:nrow(p)){
d[j,k] <- 1-sum((p[j,]*p[k,])^0.5)/sqrt(sum(p[j,])*sum(p[k,]))
}}
d<-as.dist(d)
}
makeplot <- function(amethod,d,t,k){
filename <- paste0('output/vegplots_',amethod,'.png')
#make cuts and reformat dendrogram
ngroups=k
groups <- cutree(t, k = ngroups)
soilplot <- names(groups)
clust <- unname(groups)
groupdf <- as.data.frame(cbind(soilplot, clust))
groupdf$clust <- (as.numeric(as.character(groupdf$clust)))
maxcluster <- max(groupdf$clust)
numberzeros <- nrow(groupdf[(groupdf$clust == 0),])
whichrecords <- which(groupdf$clust == 0)
if (nrow(groupdf[groupdf$clust == 0,]) != 0){
for (i in 1:numberzeros){ #assign all zero clusters to unique cluster number.
groupdf[whichrecords[i],]$clust <- maxcluster+i}}
newlabels <- t$order.lab
newlabels <- as.data.frame(newlabels)
newlabels$row <- row(newlabels)
newlabels <- merge(newlabels, groupdf, by.x='newlabels', by.y ='soilplot')
newlabels$newlabels <- paste(newlabels$clust, newlabels$newlabels)
newlabels <- newlabels[order(newlabels$row),1]
newtree <- t
newtree$order.lab <- newlabels
dend1 <- color_branches(as.hclust(newtree), k = ngroups)
dend1 <- color_labels(dend1, k = ngroups)
#output file
w <- 800
h <- nrow(d)*12+80
u <- 12
png(filename=filename,width = w, height = h, units = "px", pointsize = u)
par(mar = c(2,0,1,13))
plot(dend1, horiz = TRUE, main=paste('floristic simularity', amethod,' method of plots'), font=1, cex=0.84)
dev.off()
}
ecoregion <-  read.delim('data/d_usfs_ecoregion2007.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
vegecoregion <-  read.delim('data/UnitXEcoregionUsfs2007.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
vegecoregion <- merge(vegecoregion, ecoregion, by='usfs_ecoregion_2007_id')
unit <-  read.delim('data/unit.txt', encoding = 'latin1', na.strings = '', stringsAsFactors=FALSE)
states <-read.delim('data/d_subnation.txt')
vegstates <-read.delim('data/UnitXSubnation.txt')
vegstates <- merge(vegstates, states, by='subnation_id')
USNVClist <- readRDS('data/USNVClist.RDS')
USNVClist <- subset(USNVClist, !grepl('\\.', acctaxon))
#plotdata <- readRDS('data/plotdata.RDS')
plotdata <- readRDS('data/Com.Sp.mean.RDS')
plotdata$soilplot <- str_replace_all(plotdata$soilplot, '\\)', '.')
plotdata$soilplot <- str_replace_all(plotdata$soilplot, '\\(', '.')
View(plotdata)
library(soilDB)
library(aqp)#load before dplyr
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(dynamicTreeCut)
library(rpart)
library(rpart.plot)
library(goeveg)
library(proxy)
library(foreign)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#----
if(F){
newpedons <- soilDB::fetchNASIS(from = "pedons")
newsite <- aqp::site(newpedons)
saveRDS(newsite, "data/NASISPEDONS2.RDS")
saveRDS(newpedons, 'data/fp2.RDS')
}
NASISPEDONS <- readRDS("data/NASISPEDONS2.RDS")
fp <- readRDS('data/fp2.RDS')
names(NASISPEDONS)[names(NASISPEDONS) == "x_std"] <- 'Std.Longitude'
names(NASISPEDONS)[names(NASISPEDONS) == "y_std"] <- 'Std.Latitude'
names(NASISPEDONS)[names(NASISPEDONS) == "taxonname"] <- 'Current.Taxon.Name'
NASISPEDONS$Current.Taxonomic.Class <- paste(NASISPEDONS$taxpartsize, NASISPEDONS$taxtempregime, NASISPEDONS$taxsubgrp, sep = ', ')
NASISPEDONS$Current.Taxonomic.Class <- str_replace(NASISPEDONS$Current.Taxonomic.Class, 'NA, ','')
NASISPEDONS$Current.Taxonomic.Class <- str_replace(NASISPEDONS$Current.Taxonomic.Class, 'not used, ','')
#write.csv(NASISPEDONS, 'data/NASISPEDON.csv')
names(NASISPEDONS)[names(NASISPEDONS) == "pedon_id"] <- 'User.Site.ID'
pedonoverride <- read.delim("data/pedonoverride.txt")
s <- read.delim("data/s.txt")
View(s)
List_Habits <- read.delim("data/List_Habits.txt", na.strings = '')
obsspp <- read.delim("data/Observed_Species.txt", encoding = 'UTF-8', na.strings = '')
obsspp[obsspp$AcTaxon == 'Phalaris' & !is.na(obsspp$AcTaxon) ,]$AcTaxon <- 'Phalaris arundinacea'
obsspp <- obsspp[!grepl("\\?", obsspp$AcTaxon) | is.na(obsspp$AcTaxon) ,]
obsspp <- subset(obsspp, !is.na(specific_epithet) | AcTaxon %in% c('Sphagnum', 'Chara'))
#listspp <- read.delim("data/List_Species2011.txt", encoding = 'UTF-8', na.strings = '')
listspp <- readRDS("data/listspp.RDS")
#saveRDS(listspp, 'data/listspp.RDS')
obsspp <- subset(obsspp, !substr(AcTaxon,1,1) %in% '-'& !AcTaxon %in% '' & !is.na(Habit))
obsspp <- merge(obsspp, List_Habits[,c('Form','Simple')], by.x = 'Habit', by.y = 'Form', all.x = TRUE)
obs <- read.delim("data/Sites.txt")
obs <- subset(obs,Observer_Code %in% 'GRR.GJS' & Year >=2011 & !Observation_Type %in% c('Bogus', 'Floristics')) #filter out bogus points
unique(obs$Observation_Type)
obsspp <- merge(obs[,c('Observation_ID','Observation_Label')],obsspp, by='Observation_ID')
obsspp <- subset(obsspp, Field+Shrub+Subcanopy+Tree > 0)
if (F){ #if true, remove ambiguous taxa
obsspp <- subset(obsspp, grepl(' ', AcTaxon) & !grepl('\\?', AcTaxon))}
if (F){ #if true, remove bad invasives
obsspp <- subset(obsspp, !grepl('Phalaris', AcTaxon) | grepl('Rosa multiflora', AcTaxon))}
#VEGOBS <- read.delim("data/VEGOBS.txt")
VEGOBS <- subset(obs, !(Latitude == 0 & Longitude == 0) & Year > 1990 & Mon > 0, select = c("Observation_ID", "Observation_Label", "Observation_Type","Latitude","Longitude","Year","Mon","Day","State","County", "Soil.Series" ))
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, ',', ' ')
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, '\\?', ' ')
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, '/', ' ')
VEGOBS$pedon <- ""
VEGOBS$taxonname <- ""
VEGOBS$taxonclass <- ""
VEGOBS$pedondist <- NA
VEGOBS$pedondate <- 0
n <- nrow(VEGOBS)
for (i in 1:n){
NASISPEDONS$distance <- (((VEGOBS[i,]$Latitude - NASISPEDONS$Std.Latitude)/360*40041.47*1000)^2 +
((VEGOBS[i,]$Longitude - NASISPEDONS$Std.Longitude)/360*40041.47*1000*cos(VEGOBS[i,]$Latitude/2/360*2*3.141592))^2)^0.5
NASISPEDONS$distance2 <- ifelse(!is.na(VEGOBS[i,]$Soil.Series)&!is.na(NASISPEDONS$Current.Taxon.Name)&
(str_split_fixed(VEGOBS[i,]$Soil.Series, " ",2)[,1])==
(str_split_fixed(NASISPEDONS$Current.Taxon.Name, " ",2)[,1]), 0.1,1)
#NASISPEDONS$distance <- NASISPEDONS$distance*NASISPEDONS$distance2
NASISPEDONS$distance <- NASISPEDONS$distance+(NASISPEDONS$distance2-1)*222.2
mindist <- min(NASISPEDONS$distance, na.rm = TRUE)
if(!is.na(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$User.Site.ID)){
VEGOBS[i,]$pedondist <- -1000
VEGOBS[i,]$pedon <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$User.Site.ID)
VEGOBS[i,]$taxonname <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$Current.Taxon.Name)
VEGOBS[i,]$taxonclass <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$Current.Taxonomic.Class)
VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$obs_date), 1,4))
}else{
VEGOBS[i,]$pedondist <- round(mindist,1)
VEGOBS[i,]$pedon <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$User.Site.ID)
VEGOBS[i,]$taxonname <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$Current.Taxon.Name)
VEGOBS[i,]$taxonclass <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$Current.Taxonomic.Class)
VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$obs_date), 1,4))
#VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(NASISPEDONS[NASISPEDONS$distance == mindist,]$obs_date[1]), 1,4))
}
#VEGOBS <- merge(VEGOBS, NASISPEDONS[,c('User.Site.ID', 'Current.Taxon.Name', 'Current.Taxonomic.Class')], by.x = 'Observation_Label', by.y = 'User.Site.ID', all.x = TRUE)
mu <- readRDS(file='data/mu.RDS')
VEGOBS_mukeys <- readRDS('output/ssurgo.RDS')
VEGOBS_soilnames <- merge(VEGOBS_mukeys[,c('obs.id','mukey')], mu[,c('lmapunitiid', 'muname')], by.x='mukey', by.y= 'lmapunitiid')
VEGOBS <- merge(VEGOBS, VEGOBS_soilnames[,c('obs.id', 'muname')], by.x='Observation_ID', by.y= 'obs.id')
VEGOBS$eval <- "dump"
VEGOBS[VEGOBS$pedondist < 50,]$eval <- "keep1"
VEGOBS[(str_split_fixed(VEGOBS$muname, " ",2)[,1])==VEGOBS$taxonname & VEGOBS$pedondist < 1000 & VEGOBS$eval == 'dump', ]$eval <- "keep2"
VEGOBS[VEGOBS$pedondate==VEGOBS$Year & VEGOBS$pedondist < 100 & VEGOBS$eval == 'dump', ]$eval <- "keep3"
#VEGOBS[VEGOBS$Observation_Label==VEGOBS$pedon & VEGOBS$eval == 'dump', ]$eval <- "keep4"
VEGOBS[VEGOBS$eval == 'dump',]$taxonname <- ""
VEGOBS[VEGOBS$eval == 'dump',]$taxonclass <- ""
VEGOBS[VEGOBS$eval == 'dump',]$pedon <- ""
VEGOBS$Soil <- VEGOBS$taxonname
for (i in 1:nrow(pedonoverride)){ #replace known soils that disagree with map unit and don't have pedon records
VEGOBS[VEGOBS$Observation_Label %in% pedonoverride$sitelabel[i],]$Soil <- as.character(pedonoverride$soil[i])}
VEGOBS[VEGOBS$Soil %in% '',]$Soil <- str_split_fixed(VEGOBS[VEGOBS$Soil %in% '',]$muname, " ",2)[,1]
write.csv(VEGOBS, 'output/VEGOBS.csv', row.names = FALSE, na = "")
View(VEGOBS)
library(soilDB)
library(aqp)#load before dplyr
library(stringr)
library(BiodiversityR)
library(cluster)
library(ape)
library(dendextend)
library(dplyr)
library(dynamicTreeCut)
library(rpart)
library(rpart.plot)
library(goeveg)
library(proxy)
library(foreign)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#----
if(F){
newpedons <- soilDB::fetchNASIS(from = "pedons")
newsite <- aqp::site(newpedons)
saveRDS(newsite, "data/NASISPEDONS2.RDS")
saveRDS(newpedons, 'data/fp2.RDS')
}
NASISPEDONS <- readRDS("data/NASISPEDONS2.RDS")
fp <- readRDS('data/fp2.RDS')
names(NASISPEDONS)[names(NASISPEDONS) == "x_std"] <- 'Std.Longitude'
names(NASISPEDONS)[names(NASISPEDONS) == "y_std"] <- 'Std.Latitude'
names(NASISPEDONS)[names(NASISPEDONS) == "taxonname"] <- 'Current.Taxon.Name'
NASISPEDONS$Current.Taxonomic.Class <- paste(NASISPEDONS$taxpartsize, NASISPEDONS$taxtempregime, NASISPEDONS$taxsubgrp, sep = ', ')
NASISPEDONS$Current.Taxonomic.Class <- str_replace(NASISPEDONS$Current.Taxonomic.Class, 'NA, ','')
NASISPEDONS$Current.Taxonomic.Class <- str_replace(NASISPEDONS$Current.Taxonomic.Class, 'not used, ','')
#write.csv(NASISPEDONS, 'data/NASISPEDON.csv')
names(NASISPEDONS)[names(NASISPEDONS) == "pedon_id"] <- 'User.Site.ID'
pedonoverride <- read.delim("data/pedonoverride.txt")
s <- read.delim("data/s.txt")
List_Habits <- read.delim("data/List_Habits.txt", na.strings = '')
obsspp <- read.delim("data/Observed_Species.txt", encoding = 'UTF-8', na.strings = '')
obsspp[obsspp$AcTaxon == 'Phalaris' & !is.na(obsspp$AcTaxon) ,]$AcTaxon <- 'Phalaris arundinacea'
obsspp <- obsspp[!grepl("\\?", obsspp$AcTaxon) | is.na(obsspp$AcTaxon) ,]
obsspp <- subset(obsspp, !is.na(specific_epithet) | AcTaxon %in% c('Sphagnum', 'Chara'))
#listspp <- read.delim("data/List_Species2011.txt", encoding = 'UTF-8', na.strings = '')
listspp <- readRDS("data/listspp.RDS")
#saveRDS(listspp, 'data/listspp.RDS')
obsspp <- subset(obsspp, !substr(AcTaxon,1,1) %in% '-'& !AcTaxon %in% '' & !is.na(Habit))
obsspp <- merge(obsspp, List_Habits[,c('Form','Simple')], by.x = 'Habit', by.y = 'Form', all.x = TRUE)
obs <- read.delim("data/Sites.txt")
obs <- subset(obs,Observer_Code %in% 'GRR.GJS' & Year >=2011 & !Observation_Type %in% c('Bogus', 'Floristics')) #filter out bogus points
unique(obs$Observation_Type)
obsspp <- merge(obs[,c('Observation_ID','Observation_Label')],obsspp, by='Observation_ID')
obsspp <- subset(obsspp, Field+Shrub+Subcanopy+Tree > 0)
if (F){ #if true, remove ambiguous taxa
obsspp <- subset(obsspp, grepl(' ', AcTaxon) & !grepl('\\?', AcTaxon))}
if (F){ #if true, remove bad invasives
obsspp <- subset(obsspp, !grepl('Phalaris', AcTaxon) | grepl('Rosa multiflora', AcTaxon))}
#VEGOBS <- read.delim("data/VEGOBS.txt")
VEGOBS <- subset(obs, !(Latitude == 0 & Longitude == 0) & Year > 1990 & Mon > 0, select = c("Observation_ID", "Observation_Label", "Observation_Type","Latitude","Longitude","Year","Mon","Day","State","County", "Soil.Series" ))
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, ',', ' ')
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, '\\?', ' ')
VEGOBS$Soil.Series <- str_replace_all(VEGOBS$Soil.Series, '/', ' ')
VEGOBS$pedon <- ""
VEGOBS$taxonname <- ""
VEGOBS$taxonclass <- ""
VEGOBS$pedondist <- NA
VEGOBS$pedondate <- 0
n <- nrow(VEGOBS)
for (i in 1:n){
NASISPEDONS$distance <- (((VEGOBS[i,]$Latitude - NASISPEDONS$Std.Latitude)/360*40041.47*1000)^2 +
((VEGOBS[i,]$Longitude - NASISPEDONS$Std.Longitude)/360*40041.47*1000*cos(VEGOBS[i,]$Latitude/2/360*2*3.141592))^2)^0.5
NASISPEDONS$distance2 <- ifelse(!is.na(VEGOBS[i,]$Soil.Series)&!is.na(NASISPEDONS$Current.Taxon.Name)&
(str_split_fixed(VEGOBS[i,]$Soil.Series, " ",2)[,1])==
(str_split_fixed(NASISPEDONS$Current.Taxon.Name, " ",2)[,1]), 0.1,1)
#NASISPEDONS$distance <- NASISPEDONS$distance*NASISPEDONS$distance2
NASISPEDONS$distance <- NASISPEDONS$distance+(NASISPEDONS$distance2-1)*222.2
mindist <- min(NASISPEDONS$distance, na.rm = TRUE)
if(!is.na(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$User.Site.ID)){
VEGOBS[i,]$pedondist <- -1000
VEGOBS[i,]$pedon <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$User.Site.ID)
VEGOBS[i,]$taxonname <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$Current.Taxon.Name)
VEGOBS[i,]$taxonclass <- as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$Current.Taxonomic.Class)
VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(subset(NASISPEDONS, NASISPEDONS$User.Site.ID == VEGOBS[i,]$Observation_Label )[1,]$obs_date), 1,4))
}else{
VEGOBS[i,]$pedondist <- round(mindist,1)
VEGOBS[i,]$pedon <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$User.Site.ID)
VEGOBS[i,]$taxonname <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$Current.Taxon.Name)
VEGOBS[i,]$taxonclass <- as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$Current.Taxonomic.Class)
VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(subset(NASISPEDONS, NASISPEDONS$distance == mindist)[1,]$obs_date), 1,4))
#VEGOBS[i,]$pedondate <- as.numeric(substr(as.character(NASISPEDONS[NASISPEDONS$distance == mindist,]$obs_date[1]), 1,4))
}
#VEGOBS <- merge(VEGOBS, NASISPEDONS[,c('User.Site.ID', 'Current.Taxon.Name', 'Current.Taxonomic.Class')], by.x = 'Observation_Label', by.y = 'User.Site.ID', all.x = TRUE)
mu <- readRDS(file='data/mu.RDS')
VEGOBS_mukeys <- readRDS('output/ssurgo.RDS')
VEGOBS_soilnames <- merge(VEGOBS_mukeys[,c('obs.id','mukey')], mu[,c('lmapunitiid', 'muname')], by.x='mukey', by.y= 'lmapunitiid')
VEGOBS <- merge(VEGOBS, VEGOBS_soilnames[,c('obs.id', 'muname')], by.x='Observation_ID', by.y= 'obs.id')
VEGOBS$eval <- "dump"
VEGOBS[VEGOBS$pedondist < 50,]$eval <- "keep1"
VEGOBS[(str_split_fixed(VEGOBS$muname, " ",2)[,1])==VEGOBS$taxonname & VEGOBS$pedondist < 1000 & VEGOBS$eval == 'dump', ]$eval <- "keep2"
VEGOBS[VEGOBS$pedondate==VEGOBS$Year & VEGOBS$pedondist < 100 & VEGOBS$eval == 'dump', ]$eval <- "keep3"
#VEGOBS[VEGOBS$Observation_Label==VEGOBS$pedon & VEGOBS$eval == 'dump', ]$eval <- "keep4"
VEGOBS[VEGOBS$eval == 'dump',]$taxonname <- ""
VEGOBS[VEGOBS$eval == 'dump',]$taxonclass <- ""
VEGOBS[VEGOBS$eval == 'dump',]$pedon <- ""
VEGOBS$Soil <- VEGOBS$taxonname
for (i in 1:nrow(pedonoverride)){ #replace known soils that disagree with map unit and don't have pedon records
VEGOBS[VEGOBS$Observation_Label %in% pedonoverride$sitelabel[i],]$Soil <- as.character(pedonoverride$soil[i])}
VEGOBS[VEGOBS$Soil %in% '',]$Soil <- str_split_fixed(VEGOBS[VEGOBS$Soil %in% '',]$muname, " ",2)[,1]
write.csv(VEGOBS, 'output/VEGOBS.csv', row.names = FALSE, na = "")
View(VEGOBS)
View(NASISPEDONS)
View(VEGOBS)
View(NASISPEDONS)
